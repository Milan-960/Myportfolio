import React, { useRef, useEffect, useState, useCallback } from 'react';
import format from 'date-fns/format';
import parseISO from 'date-fns/parseISO';
import getYear from 'date-fns/getYear';
import addDays from 'date-fns/addDays';
import getDay from 'date-fns/getDay';
import getMonth from 'date-fns/getMonth';
import isAfter from 'date-fns/isAfter';
import isSameYear from 'date-fns/isSameYear';
import setDay from 'date-fns/setDay';
import subYears from 'date-fns/subYears';
import color from 'tinycolor2';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".styles_chart__316M8 {\n  margin-bottom: 1rem;\n}\n\n.styles_calendar__1PAia {\n  max-width: 100%;\n  height: auto;\n  margin-bottom: 0.25rem;\n  overflow: visible;\n}\n\n.styles_loading__1gKsy {\n  font-size: 90%;\n}\n\n.styles_title__HcRKb {\n  margin-bottom: 0.5rem;\n  padding-bottom: 0.25rem;\n}\n";
var styles = {"chart":"styles_chart__316M8","calendar":"styles_calendar__1PAia","loading":"styles_loading__1gKsy","title":"styles_title__HcRKb"};
styleInject(css_248z);

// GitHub theme
const DEFAULT_THEME = {
  background: 'transparent',
  text: '#000',
  grade4: '#216e39',
  grade3: '#30a14e',
  grade2: '#40c463',
  grade1: '#9be9a8',
  grade0: '#ebedf0'
};
const NAMESPACE = 'react-github-calendar';
const LINE_HEIGHT = 1.5;
const MIN_DISTANCE_MONTH_LABELS = 2;

function usePrevious(value) {
  const ref = useRef(value);
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// Import modules separately to reduce bundle size
const API_URL = 'https://ancient-butterfly.herokuapp.com/v3/';
const DATE_FORMAT = 'yyyy-MM-dd';

function getContributionsForDate(data, date) {
  return data.contributions.find(contrib => contrib.date === date);
}

function getBlocksForYear(year, data, lastYear) {
  const now = new Date();
  const firstDate = lastYear ? subYears(now, 1) : parseISO(`${year}-01-01`);
  const lastDate = lastYear ? now : parseISO(`${year}-12-31`);
  let weekStart = firstDate; // The week starts on Sunday - add days to get to next sunday if neccessary

  if (getDay(firstDate) !== 0) {
    weekStart = addDays(firstDate, getDay(firstDate));
  } // Fetch graph data for first row (Sundays)


  const firstRowDates = [];

  while (weekStart <= lastDate) {
    const date = format(weekStart, DATE_FORMAT);
    firstRowDates.push({
      date,
      info: getContributionsForDate(data, date)
    });
    weekStart = setDay(weekStart, 7);
  } // Add the remainig days per week (column for column)


  return firstRowDates.map(dateObj => {
    const dates = [];

    for (let i = 0; i <= 6; i += 1) {
      const date = format(setDay(parseISO(dateObj.date), i), DATE_FORMAT);

      if (isAfter(parseISO(date), lastDate)) {
        break;
      }

      dates.push({
        date,
        info: getContributionsForDate(data, date)
      });
    }

    return dates;
  });
}

function getMonthLabels(blocks, lastYear) {
  const weeks = blocks.slice(0, lastYear ? blocks.length - 1 : blocks.length);
  let previousMonth = 0; // January

  return weeks.reduce((labels, week, x) => {
    const firstWeekDay = parseISO(week[0].date);
    const month = getMonth(firstWeekDay) + 1;
    const monthChanged = month !== previousMonth;
    const firstMonthIsDecember = x === 0 && month === 12;

    if (monthChanged && !firstMonthIsDecember) {
      labels.push({
        x,
        label: format(firstWeekDay, 'MMM')
      });
      previousMonth = month;
    }

    return labels;
  }, []);
}

function getGraphDataForYear(year, data, lastYear) {
  var _data$years;

  const blocks = getBlocksForYear(year, data, lastYear);
  const monthLabels = getMonthLabels(blocks, lastYear);
  const totalCount = (_data$years = data.years[lastYear ? 'lastYear' : year]) !== null && _data$years !== void 0 ? _data$years : 0;
  return {
    year,
    blocks,
    monthLabels,
    totalCount
  };
}

async function getGitHubGraphData(options) {
  const {
    username,
    years,
    lastYear
  } = options;
  const data = await (await fetch(`${API_URL}${username}?y=all&y=lastYear`)).json();

  if (!Object.keys(data.years).length) {
    throw Error('No data available');
  }

  return years.map(year => {
    const isCurrentYear = isSameYear(parseISO(String(year)), new Date());
    return getGraphDataForYear(year, data, isCurrentYear && lastYear);
  });
}

function createCalendarTheme(baseColor, textColor = 'inherit', emptyCellColor = color('white').darken(8).toHslString(), background = 'transparent') {
  const base = color(baseColor);

  if (!base.isValid()) {
    return DEFAULT_THEME;
  }

  const text = color(textColor).isValid() ? String(color(textColor)) : DEFAULT_THEME.text;
  return {
    background,
    text,
    grade4: base.setAlpha(0.92).toHslString(),
    grade3: base.setAlpha(0.76).toHslString(),
    grade2: base.setAlpha(0.6).toHslString(),
    grade1: base.setAlpha(0.44).toHslString(),
    grade0: emptyCellColor
  };
}
function getClassName(name, extra) {
  if (extra) {
    return `${NAMESPACE}__${name} ${extra}`;
  }

  return `${NAMESPACE}__${name}`;
}

const GitHubCalendar = ({
  username,
  blockMargin = 2,
  blockSize = 12,
  children,
  color = undefined,
  dateFormat = 'MMM d, yyyy',
  fontSize = 14,
  fullYear = true,
  showTotalCount = true,
  style = {},
  theme = undefined,
  years = [Number(format(new Date(), 'yyyy'))]
}) => {
  const [graphs, setGraphs] = useState(null);
  const [error, setError] = useState(null);
  const prevYears = usePrevious(years);
  const prevUsername = usePrevious(username);
  const prevFullYear = usePrevious(fullYear);
  const fetchData = useCallback(() => {
    setError(null);
    getGitHubGraphData({
      years,
      username,
      lastYear: fullYear
    }).then(setGraphs).catch(setError);
  }, [years, username, fullYear]); // Fetch data on mount

  useEffect(() => {
    fetchData();
  }, []); // eslint-disable-line
  // Refetch if relevant props change

  useEffect(() => {
    if (prevFullYear !== fullYear || prevUsername !== username || prevYears.some(y => !years.includes(y))) {
      fetchData();
    }
  }, [fetchData, fullYear, prevFullYear, prevUsername, prevYears, username, years]);

  function getTheme() {
    if (theme) {
      return Object.assign({}, DEFAULT_THEME, theme);
    }

    if (color) {
      return createCalendarTheme(color);
    }

    return DEFAULT_THEME;
  }

  function getDimensions() {
    const textHeight = Math.round(fontSize * LINE_HEIGHT); // Since weeks start on Sunday, there is a good chance that the graph starts
    // in the week before January 1st. Therefore, the calendar shows 53 weeks.

    const width = (52 + 1) * (blockSize + blockMargin) - blockMargin;
    const height = textHeight + (blockSize + blockMargin) * 7 - blockMargin;
    return {
      width,
      height
    };
  }

  function getTooltipMessage(day) {
    const date = parseISO(day.date);
    return `<strong>${day.info.count} contributions</strong> on ${format(date, dateFormat)}`;
  }

  function renderMonthLabels(monthLabels) {
    const style = {
      fill: getTheme().text,
      fontSize
    }; // Remove the first month label if there's not enough space to the next one
    // (end of previous month)

    if (monthLabels[1].x - monthLabels[0].x <= MIN_DISTANCE_MONTH_LABELS) {
      monthLabels.shift();
    }

    return monthLabels.map(month => /*#__PURE__*/React.createElement("text", {
      x: (blockSize + blockMargin) * month.x,
      y: fontSize,
      key: month.x,
      style: style
    }, month.label));
  }

  function renderBlocks(blocks) {
    const theme = getTheme();
    const textHeight = Math.round(fontSize * LINE_HEIGHT);
    return blocks.map(week => week.map((day, y) => /*#__PURE__*/React.createElement("rect", {
      x: "0",
      y: textHeight + (blockSize + blockMargin) * y,
      width: blockSize,
      height: blockSize,
      fill: theme[`grade${day.info ? day.info.level : 0}`],
      "data-tip": day.info ? getTooltipMessage(day) : null,
      key: day.date
    }))).map((week, x) => /*#__PURE__*/React.createElement("g", {
      key: x,
      transform: `translate(${(blockSize + blockMargin) * x}, 0)`
    }, week));
  }

  function renderTotalCount(year, totalCount) {
    const isCurrentYear = getYear(new Date()) === year;
    return /*#__PURE__*/React.createElement("div", {
      className: getClassName('meta'),
      style: {
        fontSize
      }
    }, isCurrentYear && fullYear ? 'Last year' : year, ' â€“ ', isCurrentYear && !fullYear ? 'So far ' : null, totalCount, " contributions");
  }

  const {
    width,
    height
  } = getDimensions();

  if (error) {
    console.error(error);
    return /*#__PURE__*/React.createElement("p", null, "Error :(");
  }

  if (!graphs) {
    return /*#__PURE__*/React.createElement("div", {
      className: getClassName('loading', styles.loading)
    }, "Loading \u2026");
  }

  return /*#__PURE__*/React.createElement("article", {
    className: NAMESPACE,
    style: style
  }, graphs.map(graph => {
    const {
      year,
      blocks,
      monthLabels,
      totalCount
    } = graph;
    return /*#__PURE__*/React.createElement("div", {
      key: year,
      className: getClassName('chart', styles.chart)
    }, /*#__PURE__*/React.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: width,
      height: height,
      viewBox: `0 0 ${width} ${height}`,
      className: getClassName('calendar', styles.calendar),
      style: {
        backgroundColor: theme === null || theme === void 0 ? void 0 : theme.background
      }
    }, renderMonthLabels(monthLabels), renderBlocks(blocks)), showTotalCount && renderTotalCount(year, totalCount), children);
  }));
};

export default GitHubCalendar;
export { createCalendarTheme };
//# sourceMappingURL=index.es.js.map
