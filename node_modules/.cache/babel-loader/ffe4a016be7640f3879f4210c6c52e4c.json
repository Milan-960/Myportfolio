{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bubbler = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue > optionsValue) {\n    const size = particleValue + (modeValue - optionsValue) * ratio;\n    return Utils_1.NumberUtils.clamp(size, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const size = particleValue - (optionsValue - modeValue) * ratio;\n    return Utils_1.NumberUtils.clamp(size, modeValue, particleValue);\n  }\n}\n\nclass Bubbler {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled() {\n    const container = this.container;\n    const options = container.actualOptions;\n    const mouse = container.interactivity.mouse;\n    const events = options.interactivity.events;\n    const divs = events.onDiv;\n    const divBubble = Utils_1.Utils.isDivModeEnabled(Enums_1.DivMode.bubble, divs);\n\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode) || divBubble;\n  }\n\n  reset(particle, force) {\n    if (!particle.bubble.inRange || force) {\n      delete particle.bubble.div;\n      delete particle.bubble.opacity;\n      delete particle.bubble.radius;\n      delete particle.bubble.color;\n    }\n  }\n\n  interact() {\n    const options = this.container.actualOptions;\n    const events = options.interactivity.events;\n    const onHover = events.onHover;\n    const onClick = events.onClick;\n    const hoverEnabled = onHover.enable;\n    const hoverMode = onHover.mode;\n    const clickEnabled = onClick.enable;\n    const clickMode = onClick.mode;\n    const divs = events.onDiv;\n\n    if (hoverEnabled && Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode)) {\n      this.clickBubble();\n    } else {\n      Utils_1.Utils.divModeExecute(Enums_1.DivMode.bubble, divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n\n  singleSelectorHover(selector, div) {\n    const container = this.container;\n    const selectors = document.querySelectorAll(selector);\n\n    if (!selectors.length) {\n      return;\n    }\n\n    selectors.forEach(item => {\n      const elem = item;\n      const pxRatio = container.retina.pixelRatio;\n      const pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      };\n      const repulseRadius = elem.offsetWidth / 2 * pxRatio;\n      const area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio);\n      const query = container.particles.quadTree.query(area);\n\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = Utils_1.Utils.divMode(divs, elem);\n\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.reset(particle, true);\n          particle.bubble.div = elem;\n        }\n\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, divBubble);\n      }\n    });\n  }\n\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container;\n    const bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    const options = container.actualOptions;\n    const bubbleDuration = options.interactivity.modes.bubble.duration;\n    const bubbleDistance = container.retina.bubbleModeDistance;\n    const particlesParam = data.particlesObj.optValue;\n    const pObjBubble = data.bubbleObj.value;\n    const pObj = data.particlesObj.value || 0;\n    const type = data.type;\n\n    if (bubbleParam !== particlesParam) {\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= bubbleDistance) {\n          const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n          if (obj !== bubbleParam) {\n            const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n            if (type === Enums_1.ProcessBubbleType.size) {\n              particle.bubble.radius = value;\n            }\n\n            if (type === Enums_1.ProcessBubbleType.opacity) {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === Enums_1.ProcessBubbleType.size) {\n            delete particle.bubble.radius;\n          }\n\n          if (type === Enums_1.ProcessBubbleType.opacity) {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else if (pObjBubble) {\n        if (type === Enums_1.ProcessBubbleType.size) {\n          delete particle.bubble.radius;\n        }\n\n        if (type === Enums_1.ProcessBubbleType.opacity) {\n          delete particle.bubble.opacity;\n        }\n      }\n    }\n  }\n\n  clickBubble() {\n    const container = this.container;\n    const options = container.actualOptions;\n    const mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (mouseClickPos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance;\n    const query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition();\n      const distMouse = Utils_1.NumberUtils.getDistance(pos, mouseClickPos);\n      const timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: Enums_1.ProcessBubbleType.size\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: Utils_1.NumberUtils.getRangeMax(particle.options.opacity.value),\n          value: particle.opacity.value\n        },\n        type: Enums_1.ProcessBubbleType.opacity\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n\n  hoverBubble() {\n    const container = this.container;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance;\n    const query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition();\n      const pointDistance = Utils_1.NumberUtils.getDistance(pos, mousePos);\n      const ratio = 1 - pointDistance / distance;\n\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container;\n    const modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    const optSize = Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a;\n\n    const options = this.container.actualOptions;\n    const modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n    if (modeOpacity === undefined) {\n      return;\n    }\n\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = particle.opacity.value;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, Utils_1.NumberUtils.getRangeMax(optOpacity), ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n\n  hoverBubbleColor(particle, divBubble) {\n    var _a;\n\n    const options = this.container.actualOptions;\n\n    if (particle.bubble.color === undefined) {\n      const modeColor = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.color) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.color;\n\n      if (modeColor === undefined) {\n        return;\n      }\n\n      const bubbleColor = modeColor instanceof Array ? Utils_1.Utils.itemFromArray(modeColor) : modeColor;\n      particle.bubble.color = Utils_1.ColorUtils.colorToHsl(bubbleColor);\n    }\n  }\n\n}\n\nexports.Bubbler = Bubbler;","map":{"version":3,"sources":["/Users/milansachani/Desktop/Projects/MIlan-Portfolio/DamnGoodDev/node_modules/tsparticles/dist/Interactions/External/Bubbler.js"],"names":["Object","defineProperty","exports","value","Bubbler","Utils_1","require","Enums_1","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","size","NumberUtils","clamp","constructor","container","isEnabled","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","Utils","isDivModeEnabled","DivMode","bubble","onHover","enable","position","onClick","clickPosition","hoverMode","mode","clickMode","isInArray","HoverMode","ClickMode","reset","particle","force","inRange","div","opacity","radius","color","interact","hoverEnabled","clickEnabled","hoverBubble","clickBubble","divModeExecute","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","DivType","circle","Circle","Rectangle","query","particles","quadTree","contains","getPosition","modes","divMode","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","ProcessBubbleType","mouseClickPos","distance","queryCircle","clicking","getDistance","Date","getTime","clickTime","sizeData","bubbleModeSize","getRangeMax","opacityData","mousePos","pointDistance","status","Constants","mouseMoveEvent","mouseLeaveEvent","modeSize","optSize","pSize","_a","modeOpacity","optOpacity","pOpacity","modeColor","bubbleColor","Array","itemFromArray","ColorUtils","colorToHsl"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bubbler = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue > optionsValue) {\n        const size = particleValue + (modeValue - optionsValue) * ratio;\n        return Utils_1.NumberUtils.clamp(size, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const size = particleValue - (optionsValue - modeValue) * ratio;\n        return Utils_1.NumberUtils.clamp(size, modeValue, particleValue);\n    }\n}\nclass Bubbler {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const mouse = container.interactivity.mouse;\n        const events = options.interactivity.events;\n        const divs = events.onDiv;\n        const divBubble = Utils_1.Utils.isDivModeEnabled(Enums_1.DivMode.bubble, divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return (Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode) || divBubble);\n    }\n    reset(particle, force) {\n        if (!particle.bubble.inRange || force) {\n            delete particle.bubble.div;\n            delete particle.bubble.opacity;\n            delete particle.bubble.radius;\n            delete particle.bubble.color;\n        }\n    }\n    interact() {\n        const options = this.container.actualOptions;\n        const events = options.interactivity.events;\n        const onHover = events.onHover;\n        const onClick = events.onClick;\n        const hoverEnabled = onHover.enable;\n        const hoverMode = onHover.mode;\n        const clickEnabled = onClick.enable;\n        const clickMode = onClick.mode;\n        const divs = events.onDiv;\n        if (hoverEnabled && Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            Utils_1.Utils.divModeExecute(Enums_1.DivMode.bubble, divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container;\n        const selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item;\n            const pxRatio = container.retina.pixelRatio;\n            const pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            };\n            const repulseRadius = (elem.offsetWidth / 2) * pxRatio;\n            const area = div.type === Enums_1.DivType.circle\n                ? new Utils_1.Circle(pos.x, pos.y, repulseRadius)\n                : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio);\n            const query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = Utils_1.Utils.divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container;\n        const bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions;\n        const bubbleDuration = options.interactivity.modes.bubble.duration;\n        const bubbleDistance = container.retina.bubbleModeDistance;\n        const particlesParam = data.particlesObj.optValue;\n        const pObjBubble = data.bubbleObj.value;\n        const pObj = data.particlesObj.value || 0;\n        const type = data.type;\n        if (bubbleParam !== particlesParam) {\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === Enums_1.ProcessBubbleType.size) {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === Enums_1.ProcessBubbleType.opacity) {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === Enums_1.ProcessBubbleType.size) {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === Enums_1.ProcessBubbleType.opacity) {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else if (pObjBubble) {\n                if (type === Enums_1.ProcessBubbleType.size) {\n                    delete particle.bubble.radius;\n                }\n                if (type === Enums_1.ProcessBubbleType.opacity) {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n    }\n    clickBubble() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (mouseClickPos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance;\n        const query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition();\n            const distMouse = Utils_1.NumberUtils.getDistance(pos, mouseClickPos);\n            const timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: Enums_1.ProcessBubbleType.size,\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: Utils_1.NumberUtils.getRangeMax(particle.options.opacity.value),\n                    value: particle.opacity.value,\n                },\n                type: Enums_1.ProcessBubbleType.opacity,\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container;\n        const mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance;\n        const query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition();\n            const pointDistance = Utils_1.NumberUtils.getDistance(pos, mousePos);\n            const ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container;\n        const modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size)\n            ? divBubble.size * container.retina.pixelRatio\n            : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = Utils_1.NumberUtils.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a;\n        const options = this.container.actualOptions;\n        const modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (modeOpacity === undefined) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = particle.opacity.value;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, Utils_1.NumberUtils.getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, divBubble) {\n        var _a;\n        const options = this.container.actualOptions;\n        if (particle.bubble.color === undefined) {\n            const modeColor = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.color) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.color;\n            if (modeColor === undefined) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? Utils_1.Utils.itemFromArray(modeColor) : modeColor;\n            particle.bubble.color = Utils_1.ColorUtils.colorToHsl(bubbleColor);\n        }\n    }\n}\nexports.Bubbler = Bubbler;\n"]},"metadata":{},"sourceType":"script"}