{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CanvasUtils = void 0;\n\nconst ColorUtils_1 = require(\"./ColorUtils\");\n\nconst NumberUtils_1 = require(\"./NumberUtils\");\n\nfunction drawLine(context, begin, end) {\n  context.beginPath();\n  context.moveTo(begin.x, begin.y);\n  context.lineTo(end.x, end.y);\n  context.closePath();\n}\n\nfunction drawTriangle(context, p1, p2, p3) {\n  context.beginPath();\n  context.moveTo(p1.x, p1.y);\n  context.lineTo(p2.x, p2.y);\n  context.lineTo(p3.x, p3.y);\n  context.closePath();\n}\n\nclass CanvasUtils {\n  static paintBase(context, dimension, baseColor) {\n    context.save();\n    context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n    context.fillRect(0, 0, dimension.width, dimension.height);\n    context.restore();\n  }\n\n  static clear(context, dimension) {\n    context.clearRect(0, 0, dimension.width, dimension.height);\n  }\n\n  static drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n    let drawn = false;\n\n    if (NumberUtils_1.NumberUtils.getDistance(begin, end) <= maxDistance) {\n      drawLine(context, begin, end);\n      drawn = true;\n    } else if (warp) {\n      let pi1;\n      let pi2;\n      const endNE = {\n        x: end.x - canvasSize.width,\n        y: end.y\n      };\n      const d1 = NumberUtils_1.NumberUtils.getDistances(begin, endNE);\n\n      if (d1.distance <= maxDistance) {\n        const yi = begin.y - d1.dy / d1.dx * begin.x;\n        pi1 = {\n          x: 0,\n          y: yi\n        };\n        pi2 = {\n          x: canvasSize.width,\n          y: yi\n        };\n      } else {\n        const endSW = {\n          x: end.x,\n          y: end.y - canvasSize.height\n        };\n        const d2 = NumberUtils_1.NumberUtils.getDistances(begin, endSW);\n\n        if (d2.distance <= maxDistance) {\n          const yi = begin.y - d2.dy / d2.dx * begin.x;\n          const xi = -yi / (d2.dy / d2.dx);\n          pi1 = {\n            x: xi,\n            y: 0\n          };\n          pi2 = {\n            x: xi,\n            y: canvasSize.height\n          };\n        } else {\n          const endSE = {\n            x: end.x - canvasSize.width,\n            y: end.y - canvasSize.height\n          };\n          const d3 = NumberUtils_1.NumberUtils.getDistances(begin, endSE);\n\n          if (d3.distance <= maxDistance) {\n            const yi = begin.y - d3.dy / d3.dx * begin.x;\n            const xi = -yi / (d3.dy / d3.dx);\n            pi1 = {\n              x: xi,\n              y: yi\n            };\n            pi2 = {\n              x: pi1.x + canvasSize.width,\n              y: pi1.y + canvasSize.height\n            };\n          }\n        }\n      }\n\n      if (pi1 && pi2) {\n        drawLine(context, begin, pi1);\n        drawLine(context, end, pi2);\n        drawn = true;\n      }\n    }\n\n    if (!drawn) {\n      return;\n    }\n\n    context.lineWidth = width;\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = composite;\n    }\n\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n\n    if (shadow.enable) {\n      const shadowColor = ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n\n      if (shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n      }\n    }\n\n    context.stroke();\n  }\n\n  static drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n    drawTriangle(context, pos1, pos2, pos3);\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = composite;\n    }\n\n    context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n  }\n\n  static drawConnectLine(context, width, lineStyle, begin, end) {\n    context.save();\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n    context.restore();\n  }\n\n  static gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius());\n    const color1 = p1.getFillColor();\n    const color2 = p2.getFillColor();\n\n    if (!color1 || !color2) {\n      return;\n    }\n\n    const sourcePos = p1.getPosition();\n    const destPos = p2.getPosition();\n    const midRgb = ColorUtils_1.ColorUtils.mix(color1, color2, p1.getRadius(), p2.getRadius());\n    const grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromHsl(color1, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromHsl(color2, opacity));\n    return grad;\n  }\n\n  static drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    context.save();\n    drawLine(context, begin, end);\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n    context.restore();\n  }\n\n  static drawLight(container, context, mousePos) {\n    const lightOptions = container.actualOptions.interactivity.modes.light.area;\n    context.beginPath();\n    context.arc(mousePos.x, mousePos.y, lightOptions.radius, 0, 2 * Math.PI);\n    const gradientAmbientLight = context.createRadialGradient(mousePos.x, mousePos.y, 0, mousePos.x, mousePos.y, lightOptions.radius);\n    const gradient = lightOptions.gradient;\n    const gradientRgb = {\n      start: ColorUtils_1.ColorUtils.colorToRgb(gradient.start),\n      stop: ColorUtils_1.ColorUtils.colorToRgb(gradient.stop)\n    };\n\n    if (!gradientRgb.start || !gradientRgb.stop) {\n      return;\n    }\n\n    gradientAmbientLight.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromRgb(gradientRgb.start));\n    gradientAmbientLight.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromRgb(gradientRgb.stop));\n    context.fillStyle = gradientAmbientLight;\n    context.fill();\n  }\n\n  static drawParticleShadow(container, context, particle, mousePos) {\n    const pos = particle.getPosition();\n    const shadowOptions = container.actualOptions.interactivity.modes.light.shadow;\n    context.save();\n    const radius = particle.getRadius();\n    const sides = particle.sides;\n    const full = Math.PI * 2 / sides;\n    const angle = -particle.rotate.value + Math.PI / 4;\n    const factor = 1;\n    const dots = [];\n\n    for (let i = 0; i < sides; i++) {\n      dots.push({\n        x: pos.x + radius * Math.sin(angle + full * i) * factor,\n        y: pos.y + radius * Math.cos(angle + full * i) * factor\n      });\n    }\n\n    const points = [];\n    const shadowLength = shadowOptions.length;\n\n    for (const dot of dots) {\n      const dotAngle = Math.atan2(mousePos.y - dot.y, mousePos.x - dot.x);\n      const endX = dot.x + shadowLength * Math.sin(-dotAngle - Math.PI / 2);\n      const endY = dot.y + shadowLength * Math.cos(-dotAngle - Math.PI / 2);\n      points.push({\n        endX: endX,\n        endY: endY,\n        startX: dot.x,\n        startY: dot.y\n      });\n    }\n\n    const shadowRgb = ColorUtils_1.ColorUtils.colorToRgb(shadowOptions.color);\n\n    if (!shadowRgb) {\n      return;\n    }\n\n    const shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowRgb);\n\n    for (let i = points.length - 1; i >= 0; i--) {\n      const n = i == points.length - 1 ? 0 : i + 1;\n      context.beginPath();\n      context.moveTo(points[i].startX, points[i].startY);\n      context.lineTo(points[n].startX, points[n].startY);\n      context.lineTo(points[n].endX, points[n].endY);\n      context.lineTo(points[i].endX, points[i].endY);\n      context.fillStyle = shadowColor;\n      context.fill();\n    }\n\n    context.restore();\n  }\n\n  static drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, composite, radius, opacity, shadow) {\n    const pos = particle.getPosition();\n    context.save();\n    context.translate(pos.x, pos.y);\n    context.beginPath();\n    const angle = particle.rotate.value + (particle.options.rotate.path ? particle.velocity.angle : 0);\n\n    if (angle !== 0) {\n      context.rotate(angle);\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = composite;\n    }\n\n    const shadowColor = particle.shadowColor;\n\n    if (shadow.enable && shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n      context.shadowOffsetX = shadow.offset.x;\n      context.shadowOffsetY = shadow.offset.y;\n    }\n\n    if (fillColorValue) {\n      context.fillStyle = fillColorValue;\n    }\n\n    const stroke = particle.stroke;\n    context.lineWidth = particle.strokeWidth;\n\n    if (strokeColorValue) {\n      context.strokeStyle = strokeColorValue;\n    }\n\n    CanvasUtils.drawShape(container, context, particle, radius, opacity, delta);\n\n    if (stroke.width > 0) {\n      context.stroke();\n    }\n\n    if (particle.close) {\n      context.closePath();\n    }\n\n    if (particle.fill) {\n      context.fill();\n    }\n\n    context.restore();\n    context.save();\n    context.translate(pos.x, pos.y);\n\n    if (angle !== 0) {\n      context.rotate(angle);\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = composite;\n    }\n\n    CanvasUtils.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n    context.restore();\n  }\n\n  static drawShape(container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n      return;\n    }\n\n    const drawer = container.drawers.get(particle.shape);\n\n    if (!drawer) {\n      return;\n    }\n\n    drawer.draw(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n  }\n\n  static drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n      return;\n    }\n\n    const drawer = container.drawers.get(particle.shape);\n\n    if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n      return;\n    }\n\n    drawer.afterEffect(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n  }\n\n  static drawPlugin(context, plugin, delta) {\n    if (plugin.draw !== undefined) {\n      context.save();\n      plugin.draw(context, delta);\n      context.restore();\n    }\n  }\n\n}\n\nexports.CanvasUtils = CanvasUtils;","map":{"version":3,"sources":["/Users/milansachani/Desktop/Projects/MIlan-Portfolio/Myportfolio/node_modules/tsparticles/dist/Utils/CanvasUtils.js"],"names":["Object","defineProperty","exports","value","CanvasUtils","ColorUtils_1","require","NumberUtils_1","drawLine","context","begin","end","beginPath","moveTo","x","y","lineTo","closePath","drawTriangle","p1","p2","p3","paintBase","dimension","baseColor","save","fillStyle","fillRect","width","height","restore","clear","clearRect","drawLinkLine","maxDistance","canvasSize","warp","backgroundMask","composite","colorLine","opacity","shadow","drawn","NumberUtils","getDistance","pi1","pi2","endNE","d1","getDistances","distance","yi","dy","dx","endSW","d2","xi","endSE","d3","lineWidth","globalCompositeOperation","strokeStyle","ColorUtils","getStyleFromRgb","enable","shadowColor","colorToRgb","color","shadowBlur","blur","stroke","drawLinkTriangle","pos1","pos2","pos3","colorTriangle","opacityTriangle","fill","drawConnectLine","lineStyle","gradient","gradStop","Math","floor","getRadius","color1","getFillColor","color2","sourcePos","getPosition","destPos","midRgb","mix","grad","createLinearGradient","addColorStop","getStyleFromHsl","drawGrabLine","drawLight","container","mousePos","lightOptions","actualOptions","interactivity","modes","light","area","arc","radius","PI","gradientAmbientLight","createRadialGradient","gradientRgb","start","stop","drawParticleShadow","particle","pos","shadowOptions","sides","full","angle","rotate","factor","dots","i","push","sin","cos","points","shadowLength","length","dot","dotAngle","atan2","endX","endY","startX","startY","shadowRgb","n","drawParticle","delta","fillColorValue","strokeColorValue","translate","options","path","velocity","shadowOffsetX","offset","shadowOffsetY","strokeWidth","drawShape","close","drawShapeAfterEffect","shape","drawer","drawers","get","draw","retina","pixelRatio","afterEffect","drawPlugin","plugin","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CanvasUtils = void 0;\nconst ColorUtils_1 = require(\"./ColorUtils\");\nconst NumberUtils_1 = require(\"./NumberUtils\");\nfunction drawLine(context, begin, end) {\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n}\nfunction drawTriangle(context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n}\nclass CanvasUtils {\n    static paintBase(context, dimension, baseColor) {\n        context.save();\n        context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n        context.fillRect(0, 0, dimension.width, dimension.height);\n        context.restore();\n    }\n    static clear(context, dimension) {\n        context.clearRect(0, 0, dimension.width, dimension.height);\n    }\n    static drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n        let drawn = false;\n        if (NumberUtils_1.NumberUtils.getDistance(begin, end) <= maxDistance) {\n            drawLine(context, begin, end);\n            drawn = true;\n        }\n        else if (warp) {\n            let pi1;\n            let pi2;\n            const endNE = {\n                x: end.x - canvasSize.width,\n                y: end.y,\n            };\n            const d1 = NumberUtils_1.NumberUtils.getDistances(begin, endNE);\n            if (d1.distance <= maxDistance) {\n                const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n                pi1 = { x: 0, y: yi };\n                pi2 = { x: canvasSize.width, y: yi };\n            }\n            else {\n                const endSW = {\n                    x: end.x,\n                    y: end.y - canvasSize.height,\n                };\n                const d2 = NumberUtils_1.NumberUtils.getDistances(begin, endSW);\n                if (d2.distance <= maxDistance) {\n                    const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                    const xi = -yi / (d2.dy / d2.dx);\n                    pi1 = { x: xi, y: 0 };\n                    pi2 = { x: xi, y: canvasSize.height };\n                }\n                else {\n                    const endSE = {\n                        x: end.x - canvasSize.width,\n                        y: end.y - canvasSize.height,\n                    };\n                    const d3 = NumberUtils_1.NumberUtils.getDistances(begin, endSE);\n                    if (d3.distance <= maxDistance) {\n                        const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                        const xi = -yi / (d3.dy / d3.dx);\n                        pi1 = { x: xi, y: yi };\n                        pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                    }\n                }\n            }\n            if (pi1 && pi2) {\n                drawLine(context, begin, pi1);\n                drawLine(context, end, pi2);\n                drawn = true;\n            }\n        }\n        if (!drawn) {\n            return;\n        }\n        context.lineWidth = width;\n        if (backgroundMask) {\n            context.globalCompositeOperation = composite;\n        }\n        context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n        if (shadow.enable) {\n            const shadowColor = ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n            if (shadowColor) {\n                context.shadowBlur = shadow.blur;\n                context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n            }\n        }\n        context.stroke();\n    }\n    static drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n        drawTriangle(context, pos1, pos2, pos3);\n        if (backgroundMask) {\n            context.globalCompositeOperation = composite;\n        }\n        context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorTriangle, opacityTriangle);\n        context.fill();\n    }\n    static drawConnectLine(context, width, lineStyle, begin, end) {\n        context.save();\n        drawLine(context, begin, end);\n        context.lineWidth = width;\n        context.strokeStyle = lineStyle;\n        context.stroke();\n        context.restore();\n    }\n    static gradient(context, p1, p2, opacity) {\n        const gradStop = Math.floor(p2.getRadius() / p1.getRadius());\n        const color1 = p1.getFillColor();\n        const color2 = p2.getFillColor();\n        if (!color1 || !color2) {\n            return;\n        }\n        const sourcePos = p1.getPosition();\n        const destPos = p2.getPosition();\n        const midRgb = ColorUtils_1.ColorUtils.mix(color1, color2, p1.getRadius(), p2.getRadius());\n        const grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n        grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromHsl(color1, opacity));\n        grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromRgb(midRgb, opacity));\n        grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromHsl(color2, opacity));\n        return grad;\n    }\n    static drawGrabLine(context, width, begin, end, colorLine, opacity) {\n        context.save();\n        drawLine(context, begin, end);\n        context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n        context.lineWidth = width;\n        context.stroke();\n        context.restore();\n    }\n    static drawLight(container, context, mousePos) {\n        const lightOptions = container.actualOptions.interactivity.modes.light.area;\n        context.beginPath();\n        context.arc(mousePos.x, mousePos.y, lightOptions.radius, 0, 2 * Math.PI);\n        const gradientAmbientLight = context.createRadialGradient(mousePos.x, mousePos.y, 0, mousePos.x, mousePos.y, lightOptions.radius);\n        const gradient = lightOptions.gradient;\n        const gradientRgb = {\n            start: ColorUtils_1.ColorUtils.colorToRgb(gradient.start),\n            stop: ColorUtils_1.ColorUtils.colorToRgb(gradient.stop),\n        };\n        if (!gradientRgb.start || !gradientRgb.stop) {\n            return;\n        }\n        gradientAmbientLight.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromRgb(gradientRgb.start));\n        gradientAmbientLight.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromRgb(gradientRgb.stop));\n        context.fillStyle = gradientAmbientLight;\n        context.fill();\n    }\n    static drawParticleShadow(container, context, particle, mousePos) {\n        const pos = particle.getPosition();\n        const shadowOptions = container.actualOptions.interactivity.modes.light.shadow;\n        context.save();\n        const radius = particle.getRadius();\n        const sides = particle.sides;\n        const full = (Math.PI * 2) / sides;\n        const angle = -particle.rotate.value + Math.PI / 4;\n        const factor = 1;\n        const dots = [];\n        for (let i = 0; i < sides; i++) {\n            dots.push({\n                x: pos.x + radius * Math.sin(angle + full * i) * factor,\n                y: pos.y + radius * Math.cos(angle + full * i) * factor,\n            });\n        }\n        const points = [];\n        const shadowLength = shadowOptions.length;\n        for (const dot of dots) {\n            const dotAngle = Math.atan2(mousePos.y - dot.y, mousePos.x - dot.x);\n            const endX = dot.x + shadowLength * Math.sin(-dotAngle - Math.PI / 2);\n            const endY = dot.y + shadowLength * Math.cos(-dotAngle - Math.PI / 2);\n            points.push({\n                endX: endX,\n                endY: endY,\n                startX: dot.x,\n                startY: dot.y,\n            });\n        }\n        const shadowRgb = ColorUtils_1.ColorUtils.colorToRgb(shadowOptions.color);\n        if (!shadowRgb) {\n            return;\n        }\n        const shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowRgb);\n        for (let i = points.length - 1; i >= 0; i--) {\n            const n = i == points.length - 1 ? 0 : i + 1;\n            context.beginPath();\n            context.moveTo(points[i].startX, points[i].startY);\n            context.lineTo(points[n].startX, points[n].startY);\n            context.lineTo(points[n].endX, points[n].endY);\n            context.lineTo(points[i].endX, points[i].endY);\n            context.fillStyle = shadowColor;\n            context.fill();\n        }\n        context.restore();\n    }\n    static drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, composite, radius, opacity, shadow) {\n        const pos = particle.getPosition();\n        context.save();\n        context.translate(pos.x, pos.y);\n        context.beginPath();\n        const angle = particle.rotate.value + (particle.options.rotate.path ? particle.velocity.angle : 0);\n        if (angle !== 0) {\n            context.rotate(angle);\n        }\n        if (backgroundMask) {\n            context.globalCompositeOperation = composite;\n        }\n        const shadowColor = particle.shadowColor;\n        if (shadow.enable && shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n            context.shadowOffsetX = shadow.offset.x;\n            context.shadowOffsetY = shadow.offset.y;\n        }\n        if (fillColorValue) {\n            context.fillStyle = fillColorValue;\n        }\n        const stroke = particle.stroke;\n        context.lineWidth = particle.strokeWidth;\n        if (strokeColorValue) {\n            context.strokeStyle = strokeColorValue;\n        }\n        CanvasUtils.drawShape(container, context, particle, radius, opacity, delta);\n        if (stroke.width > 0) {\n            context.stroke();\n        }\n        if (particle.close) {\n            context.closePath();\n        }\n        if (particle.fill) {\n            context.fill();\n        }\n        context.restore();\n        context.save();\n        context.translate(pos.x, pos.y);\n        if (angle !== 0) {\n            context.rotate(angle);\n        }\n        if (backgroundMask) {\n            context.globalCompositeOperation = composite;\n        }\n        CanvasUtils.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n        context.restore();\n    }\n    static drawShape(container, context, particle, radius, opacity, delta) {\n        if (!particle.shape) {\n            return;\n        }\n        const drawer = container.drawers.get(particle.shape);\n        if (!drawer) {\n            return;\n        }\n        drawer.draw(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n    }\n    static drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n        if (!particle.shape) {\n            return;\n        }\n        const drawer = container.drawers.get(particle.shape);\n        if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n            return;\n        }\n        drawer.afterEffect(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n    }\n    static drawPlugin(context, plugin, delta) {\n        if (plugin.draw !== undefined) {\n            context.save();\n            plugin.draw(context, delta);\n            context.restore();\n        }\n    }\n}\nexports.CanvasUtils = CanvasUtils;\n"]},"metadata":{},"sourceType":"script"}