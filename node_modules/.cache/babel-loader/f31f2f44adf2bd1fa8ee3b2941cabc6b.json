{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberUtils = void 0;\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Vector_1 = require(\"../Core/Particle/Vector\");\n\nclass NumberUtils {\n  static clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n  }\n\n  static mix(comp1, comp2, weight1, weight2) {\n    return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n  }\n\n  static randomInRange(r) {\n    const max = NumberUtils.getRangeMax(r);\n    let min = NumberUtils.getRangeMin(r);\n\n    if (max === min) {\n      min = 0;\n    }\n\n    return Math.random() * (max - min) + min;\n  }\n\n  static getRangeValue(value) {\n    return typeof value === \"number\" ? value : NumberUtils.randomInRange(value);\n  }\n\n  static getRangeMin(value) {\n    return typeof value === \"number\" ? value : value.min;\n  }\n\n  static getRangeMax(value) {\n    return typeof value === \"number\" ? value : value.max;\n  }\n\n  static setRangeValue(source, value) {\n    if (source === value || value === undefined && typeof source === \"number\") {\n      return source;\n    }\n\n    const min = NumberUtils.getRangeMin(source),\n          max = NumberUtils.getRangeMax(source);\n    return value !== undefined ? {\n      min: Math.min(min, value),\n      max: Math.max(max, value)\n    } : NumberUtils.setRangeValue(min, max);\n  }\n\n  static getValue(options) {\n    const random = options.random;\n    const {\n      enable,\n      minimumValue\n    } = typeof random === \"boolean\" ? {\n      enable: random,\n      minimumValue: 0\n    } : random;\n    return enable ? NumberUtils.getRangeValue(NumberUtils.setRangeValue(options.value, minimumValue)) : NumberUtils.getRangeValue(options.value);\n  }\n\n  static getDistances(pointA, pointB) {\n    const dx = pointA.x - pointB.x;\n    const dy = pointA.y - pointB.y;\n    return {\n      dx: dx,\n      dy: dy,\n      distance: Math.sqrt(dx * dx + dy * dy)\n    };\n  }\n\n  static getDistance(pointA, pointB) {\n    return NumberUtils.getDistances(pointA, pointB).distance;\n  }\n\n  static getParticleBaseVelocity(direction) {\n    const baseVelocity = Vector_1.Vector.origin;\n    baseVelocity.length = 1;\n\n    switch (direction) {\n      case Enums_1.MoveDirection.top:\n        baseVelocity.angle = -Math.PI / 2;\n        break;\n\n      case Enums_1.MoveDirection.topRight:\n        baseVelocity.angle = -Math.PI / 4;\n        break;\n\n      case Enums_1.MoveDirection.right:\n        baseVelocity.angle = 0;\n        break;\n\n      case Enums_1.MoveDirection.bottomRight:\n        baseVelocity.angle = Math.PI / 4;\n        break;\n\n      case Enums_1.MoveDirection.bottom:\n        baseVelocity.angle = Math.PI / 2;\n        break;\n\n      case Enums_1.MoveDirection.bottomLeft:\n        baseVelocity.angle = 3 * Math.PI / 4;\n        break;\n\n      case Enums_1.MoveDirection.left:\n        baseVelocity.angle = Math.PI;\n        break;\n\n      case Enums_1.MoveDirection.topLeft:\n        baseVelocity.angle = -3 * Math.PI / 4;\n        break;\n\n      case Enums_1.MoveDirection.none:\n      default:\n        baseVelocity.angle = Math.random() * Math.PI * 2;\n        break;\n    }\n\n    return baseVelocity;\n  }\n\n  static rotateVelocity(velocity, angle) {\n    return {\n      horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n      vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n    };\n  }\n\n  static collisionVelocity(v1, v2, m1, m2) {\n    return Vector_1.Vector.create(v1.x * (m1 - m2) / (m1 + m2) + v2.x * 2 * m2 / (m1 + m2), v1.y);\n  }\n\n  static calcEasing(value, type) {\n    switch (type) {\n      case Enums_1.EasingType.easeOutQuad:\n        return 1 - Math.pow(1 - value, 2);\n\n      case Enums_1.EasingType.easeOutCubic:\n        return 1 - Math.pow(1 - value, 3);\n\n      case Enums_1.EasingType.easeOutQuart:\n        return 1 - Math.pow(1 - value, 4);\n\n      case Enums_1.EasingType.easeOutQuint:\n        return 1 - Math.pow(1 - value, 5);\n\n      case Enums_1.EasingType.easeOutExpo:\n        return value === 1 ? 1 : 1 - Math.pow(2, -10 * value);\n\n      case Enums_1.EasingType.easeOutSine:\n        return Math.sin(value * Math.PI / 2);\n\n      case Enums_1.EasingType.easeOutBack:\n        {\n          const c1 = 1.70158;\n          const c3 = c1 + 1;\n          return 1 + c3 * Math.pow(value - 1, 3) + c1 * Math.pow(value - 1, 2);\n        }\n\n      case Enums_1.EasingType.easeOutCirc:\n        return Math.sqrt(1 - Math.pow(value - 1, 2));\n\n      default:\n        return value;\n    }\n  }\n\n}\n\nexports.NumberUtils = NumberUtils;","map":{"version":3,"sources":["/Users/milansachani/Desktop/Projects/MIlan-Portfolio/DamnGoodDev/node_modules/tsparticles/dist/Utils/NumberUtils.js"],"names":["Object","defineProperty","exports","value","NumberUtils","Enums_1","require","Vector_1","clamp","num","min","max","Math","mix","comp1","comp2","weight1","weight2","floor","randomInRange","r","getRangeMax","getRangeMin","random","getRangeValue","setRangeValue","source","undefined","getValue","options","enable","minimumValue","getDistances","pointA","pointB","dx","x","dy","y","distance","sqrt","getDistance","getParticleBaseVelocity","direction","baseVelocity","Vector","origin","length","MoveDirection","top","angle","PI","topRight","right","bottomRight","bottom","bottomLeft","left","topLeft","none","rotateVelocity","velocity","horizontal","cos","vertical","sin","collisionVelocity","v1","v2","m1","m2","create","calcEasing","type","EasingType","easeOutQuad","pow","easeOutCubic","easeOutQuart","easeOutQuint","easeOutExpo","easeOutSine","easeOutBack","c1","c3","easeOutCirc"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NumberUtils = void 0;\nconst Enums_1 = require(\"../Enums\");\nconst Vector_1 = require(\"../Core/Particle/Vector\");\nclass NumberUtils {\n    static clamp(num, min, max) {\n        return Math.min(Math.max(num, min), max);\n    }\n    static mix(comp1, comp2, weight1, weight2) {\n        return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n    }\n    static randomInRange(r) {\n        const max = NumberUtils.getRangeMax(r);\n        let min = NumberUtils.getRangeMin(r);\n        if (max === min) {\n            min = 0;\n        }\n        return Math.random() * (max - min) + min;\n    }\n    static getRangeValue(value) {\n        return typeof value === \"number\" ? value : NumberUtils.randomInRange(value);\n    }\n    static getRangeMin(value) {\n        return typeof value === \"number\" ? value : value.min;\n    }\n    static getRangeMax(value) {\n        return typeof value === \"number\" ? value : value.max;\n    }\n    static setRangeValue(source, value) {\n        if (source === value || (value === undefined && typeof source === \"number\")) {\n            return source;\n        }\n        const min = NumberUtils.getRangeMin(source), max = NumberUtils.getRangeMax(source);\n        return value !== undefined\n            ? {\n                min: Math.min(min, value),\n                max: Math.max(max, value),\n            }\n            : NumberUtils.setRangeValue(min, max);\n    }\n    static getValue(options) {\n        const random = options.random;\n        const { enable, minimumValue } = typeof random === \"boolean\" ? { enable: random, minimumValue: 0 } : random;\n        return enable\n            ? NumberUtils.getRangeValue(NumberUtils.setRangeValue(options.value, minimumValue))\n            : NumberUtils.getRangeValue(options.value);\n    }\n    static getDistances(pointA, pointB) {\n        const dx = pointA.x - pointB.x;\n        const dy = pointA.y - pointB.y;\n        return { dx: dx, dy: dy, distance: Math.sqrt(dx * dx + dy * dy) };\n    }\n    static getDistance(pointA, pointB) {\n        return NumberUtils.getDistances(pointA, pointB).distance;\n    }\n    static getParticleBaseVelocity(direction) {\n        const baseVelocity = Vector_1.Vector.origin;\n        baseVelocity.length = 1;\n        switch (direction) {\n            case Enums_1.MoveDirection.top:\n                baseVelocity.angle = -Math.PI / 2;\n                break;\n            case Enums_1.MoveDirection.topRight:\n                baseVelocity.angle = -Math.PI / 4;\n                break;\n            case Enums_1.MoveDirection.right:\n                baseVelocity.angle = 0;\n                break;\n            case Enums_1.MoveDirection.bottomRight:\n                baseVelocity.angle = Math.PI / 4;\n                break;\n            case Enums_1.MoveDirection.bottom:\n                baseVelocity.angle = Math.PI / 2;\n                break;\n            case Enums_1.MoveDirection.bottomLeft:\n                baseVelocity.angle = (3 * Math.PI) / 4;\n                break;\n            case Enums_1.MoveDirection.left:\n                baseVelocity.angle = Math.PI;\n                break;\n            case Enums_1.MoveDirection.topLeft:\n                baseVelocity.angle = (-3 * Math.PI) / 4;\n                break;\n            case Enums_1.MoveDirection.none:\n            default:\n                baseVelocity.angle = Math.random() * Math.PI * 2;\n                break;\n        }\n        return baseVelocity;\n    }\n    static rotateVelocity(velocity, angle) {\n        return {\n            horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n            vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle),\n        };\n    }\n    static collisionVelocity(v1, v2, m1, m2) {\n        return Vector_1.Vector.create((v1.x * (m1 - m2)) / (m1 + m2) + (v2.x * 2 * m2) / (m1 + m2), v1.y);\n    }\n    static calcEasing(value, type) {\n        switch (type) {\n            case Enums_1.EasingType.easeOutQuad:\n                return 1 - Math.pow((1 - value), 2);\n            case Enums_1.EasingType.easeOutCubic:\n                return 1 - Math.pow((1 - value), 3);\n            case Enums_1.EasingType.easeOutQuart:\n                return 1 - Math.pow((1 - value), 4);\n            case Enums_1.EasingType.easeOutQuint:\n                return 1 - Math.pow((1 - value), 5);\n            case Enums_1.EasingType.easeOutExpo:\n                return value === 1 ? 1 : 1 - Math.pow(2, -10 * value);\n            case Enums_1.EasingType.easeOutSine:\n                return Math.sin((value * Math.PI) / 2);\n            case Enums_1.EasingType.easeOutBack: {\n                const c1 = 1.70158;\n                const c3 = c1 + 1;\n                return 1 + c3 * Math.pow(value - 1, 3) + c1 * Math.pow(value - 1, 2);\n            }\n            case Enums_1.EasingType.easeOutCirc:\n                return Math.sqrt(1 - Math.pow(value - 1, 2));\n            default:\n                return value;\n        }\n    }\n}\nexports.NumberUtils = NumberUtils;\n"]},"metadata":{},"sourceType":"script"}