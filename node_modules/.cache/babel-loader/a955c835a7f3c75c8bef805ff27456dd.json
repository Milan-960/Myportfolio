{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Connector = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Modes_1 = require(\"../../Enums/Modes\");\n\nclass Connector {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled() {\n    const container = this.container;\n    const mouse = container.interactivity.mouse;\n    const events = container.actualOptions.interactivity.events;\n\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    return Utils_1.Utils.isInArray(Modes_1.HoverMode.connect, hoverMode);\n  }\n\n  reset() {}\n\n  interact() {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n      const mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const distance = Math.abs(container.retina.connectModeRadius);\n      const query = container.particles.quadTree.queryCircle(mousePos, distance);\n      let i = 0;\n\n      for (const p1 of query) {\n        const pos1 = p1.getPosition();\n\n        for (const p2 of query.slice(i + 1)) {\n          const pos2 = p2.getPosition();\n          const distMax = Math.abs(container.retina.connectModeDistance);\n          const xDiff = Math.abs(pos1.x - pos2.x);\n          const yDiff = Math.abs(pos1.y - pos2.y);\n\n          if (xDiff < distMax && yDiff < distMax) {\n            container.canvas.drawConnectLine(p1, p2);\n          }\n        }\n\n        ++i;\n      }\n    }\n  }\n\n}\n\nexports.Connector = Connector;","map":{"version":3,"sources":["/Users/milansachani/Desktop/Projects/MIlan-Portfolio/DamnGoodDev/React-Portfolio/node_modules/tsparticles/dist/Interactions/External/Connector.js"],"names":["Object","defineProperty","exports","value","Connector","Utils_1","require","Modes_1","constructor","container","isEnabled","mouse","interactivity","events","actualOptions","onHover","enable","position","hoverMode","mode","Utils","isInArray","HoverMode","connect","reset","interact","options","status","mousePos","distance","Math","abs","retina","connectModeRadius","query","particles","quadTree","queryCircle","i","p1","pos1","getPosition","p2","slice","pos2","distMax","connectModeDistance","xDiff","x","yDiff","y","canvas","drawConnectLine"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMF,SAAN,CAAgB;AACZI,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACDC,EAAAA,SAAS,GAAG;AACR,UAAMD,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAME,KAAK,GAAGF,SAAS,CAACG,aAAV,CAAwBD,KAAtC;AACA,UAAME,MAAM,GAAGJ,SAAS,CAACK,aAAV,CAAwBF,aAAxB,CAAsCC,MAArD;;AACA,QAAI,EAAEA,MAAM,CAACE,OAAP,CAAeC,MAAf,IAAyBL,KAAK,CAACM,QAAjC,CAAJ,EAAgD;AAC5C,aAAO,KAAP;AACH;;AACD,UAAMC,SAAS,GAAGL,MAAM,CAACE,OAAP,CAAeI,IAAjC;AACA,WAAOd,OAAO,CAACe,KAAR,CAAcC,SAAd,CAAwBd,OAAO,CAACe,SAAR,CAAkBC,OAA1C,EAAmDL,SAAnD,CAAP;AACH;;AACDM,EAAAA,KAAK,GAAG,CACP;;AACDC,EAAAA,QAAQ,GAAG;AACP,UAAMhB,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMiB,OAAO,GAAGjB,SAAS,CAACK,aAA1B;;AACA,QAAIY,OAAO,CAACd,aAAR,CAAsBC,MAAtB,CAA6BE,OAA7B,CAAqCC,MAArC,IAA+CP,SAAS,CAACG,aAAV,CAAwBe,MAAxB,KAAmC,WAAtF,EAAmG;AAC/F,YAAMC,QAAQ,GAAGnB,SAAS,CAACG,aAAV,CAAwBD,KAAxB,CAA8BM,QAA/C;;AACA,UAAI,CAACW,QAAL,EAAe;AACX;AACH;;AACD,YAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAStB,SAAS,CAACuB,MAAV,CAAiBC,iBAA1B,CAAjB;AACA,YAAMC,KAAK,GAAGzB,SAAS,CAAC0B,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyCT,QAAzC,EAAmDC,QAAnD,CAAd;AACA,UAAIS,CAAC,GAAG,CAAR;;AACA,WAAK,MAAMC,EAAX,IAAiBL,KAAjB,EAAwB;AACpB,cAAMM,IAAI,GAAGD,EAAE,CAACE,WAAH,EAAb;;AACA,aAAK,MAAMC,EAAX,IAAiBR,KAAK,CAACS,KAAN,CAAYL,CAAC,GAAG,CAAhB,CAAjB,EAAqC;AACjC,gBAAMM,IAAI,GAAGF,EAAE,CAACD,WAAH,EAAb;AACA,gBAAMI,OAAO,GAAGf,IAAI,CAACC,GAAL,CAAStB,SAAS,CAACuB,MAAV,CAAiBc,mBAA1B,CAAhB;AACA,gBAAMC,KAAK,GAAGjB,IAAI,CAACC,GAAL,CAASS,IAAI,CAACQ,CAAL,GAASJ,IAAI,CAACI,CAAvB,CAAd;AACA,gBAAMC,KAAK,GAAGnB,IAAI,CAACC,GAAL,CAASS,IAAI,CAACU,CAAL,GAASN,IAAI,CAACM,CAAvB,CAAd;;AACA,cAAIH,KAAK,GAAGF,OAAR,IAAmBI,KAAK,GAAGJ,OAA/B,EAAwC;AACpCpC,YAAAA,SAAS,CAAC0C,MAAV,CAAiBC,eAAjB,CAAiCb,EAAjC,EAAqCG,EAArC;AACH;AACJ;;AACD,UAAEJ,CAAF;AACH;AACJ;AACJ;;AAzCW;;AA2ChBpC,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Connector = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Modes_1 = require(\"../../Enums/Modes\");\nclass Connector {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        const container = this.container;\n        const mouse = container.interactivity.mouse;\n        const events = container.actualOptions.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        return Utils_1.Utils.isInArray(Modes_1.HoverMode.connect, hoverMode);\n    }\n    reset() {\n    }\n    interact() {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius);\n            const query = container.particles.quadTree.queryCircle(mousePos, distance);\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition();\n                    const distMax = Math.abs(container.retina.connectModeDistance);\n                    const xDiff = Math.abs(pos1.x - pos2.x);\n                    const yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        container.canvas.drawConnectLine(p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n}\nexports.Connector = Connector;\n"]},"metadata":{},"sourceType":"script"}