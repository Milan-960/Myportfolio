{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbsorberInstance = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Vector_1 = require(\"../../Core/Particle/Vector\");\n\nclass AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    var _a, _b, _c;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position ? Vector_1.Vector.create(position.x, position.y) : undefined;\n    this.options = options;\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = Utils_1.NumberUtils.getValue(options.size) * container.retina.pixelRatio;\n    this.mass = this.size * options.size.density * container.retina.reduceFactor;\n    const limit = options.size.limit;\n    this.limit = limit !== undefined ? limit * container.retina.pixelRatio * container.retina.reduceFactor : limit;\n    const color = typeof options.color === \"string\" ? {\n      value: options.color\n    } : options.color;\n    this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n  }\n\n  attract(particle) {\n    const options = this.options;\n\n    if (options.draggable) {\n      const mouse = this.container.interactivity.mouse;\n\n      if (mouse.clicking && mouse.downPosition) {\n        const mouseDist = Utils_1.NumberUtils.getDistance(this.position, mouse.downPosition);\n\n        if (mouseDist <= this.size) {\n          this.dragging = true;\n        }\n      } else {\n        this.dragging = false;\n      }\n\n      if (this.dragging && mouse.position) {\n        this.position.x = mouse.position.x;\n        this.position.y = mouse.position.y;\n      }\n    }\n\n    const pos = particle.getPosition();\n    const {\n      dx,\n      dy,\n      distance\n    } = Utils_1.NumberUtils.getDistances(this.position, pos);\n    const v = Vector_1.Vector.create(dx, dy);\n    v.length = this.mass / Math.pow(distance, 2) * this.container.retina.reduceFactor;\n\n    if (distance < this.size + particle.getRadius()) {\n      const sizeFactor = particle.getRadius() * 0.033 * this.container.retina.pixelRatio;\n\n      if (this.size > particle.getRadius() && distance < this.size - particle.getRadius()) {\n        if (options.destroy) {\n          particle.destroy();\n        } else {\n          particle.needsNewPosition = true;\n          this.updateParticlePosition(particle, v);\n        }\n      } else {\n        if (options.destroy) {\n          particle.size.value -= sizeFactor;\n        }\n\n        this.updateParticlePosition(particle, v);\n      }\n\n      if (this.limit === undefined || this.size < this.limit) {\n        this.size += sizeFactor;\n      }\n\n      this.mass += sizeFactor * this.options.size.density * this.container.retina.reduceFactor;\n    } else {\n      this.updateParticlePosition(particle, v);\n    }\n  }\n\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n    context.fill();\n  }\n\n  calcPosition() {\n    var _a, _b;\n\n    const container = this.container;\n    const percentPosition = this.options.position;\n    return Vector_1.Vector.create(((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width, ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height);\n  }\n\n  updateParticlePosition(particle, v) {\n    var _a;\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    const canvasSize = this.container.canvas.size;\n\n    if (particle.needsNewPosition) {\n      const pSize = particle.getRadius();\n      particle.position.x = Math.random() * (canvasSize.width - pSize * 2) + pSize;\n      particle.position.y = Math.random() * (canvasSize.height - pSize * 2) + pSize;\n      particle.needsNewPosition = false;\n    }\n\n    if (this.options.orbits) {\n      if (particle.orbit === undefined) {\n        particle.orbit = Vector_1.Vector.create(0, 0);\n        particle.orbit.length = Utils_1.NumberUtils.getDistance(particle.getPosition(), this.position);\n        particle.orbit.angle = Math.random() * Math.PI * 2;\n      }\n\n      if (particle.orbit.length <= this.size && !this.options.destroy) {\n        particle.orbit.length = Math.random() * Math.max(canvasSize.width, canvasSize.height);\n      }\n\n      particle.velocity.x = 0;\n      particle.velocity.y = 0;\n      particle.position.setTo(particle.orbit.add(this.position));\n      particle.orbit.length -= v.length;\n      particle.orbit.angle += ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.NumberUtils.getRangeValue(particle.options.move.speed) * this.container.retina.pixelRatio) / 100 * this.container.retina.reduceFactor;\n    } else {\n      particle.velocity.addTo(v);\n    }\n  }\n\n}\n\nexports.AbsorberInstance = AbsorberInstance;","map":{"version":3,"sources":["/Users/milansachani/Desktop/Projects/MIlan-Portfolio/DamnGoodDev/node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js"],"names":["Object","defineProperty","exports","value","AbsorberInstance","Utils_1","require","Vector_1","constructor","absorbers","container","options","position","_a","_b","_c","initialPosition","Vector","create","x","y","undefined","dragging","name","opacity","size","NumberUtils","getValue","retina","pixelRatio","mass","density","reduceFactor","limit","color","ColorUtils","colorToRgb","b","g","r","copy","calcPosition","attract","particle","draggable","mouse","interactivity","clicking","downPosition","mouseDist","getDistance","pos","getPosition","dx","dy","distance","getDistances","v","length","Math","pow","getRadius","sizeFactor","destroy","needsNewPosition","updateParticlePosition","resize","Utils","isPointInside","canvas","draw","context","translate","beginPath","arc","PI","closePath","fillStyle","getStyleFromRgb","fill","percentPosition","random","width","height","destroyed","canvasSize","pSize","orbits","orbit","angle","max","velocity","setTo","add","moveSpeed","getRangeValue","move","speed","addTo"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbsorberInstance = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Vector_1 = require(\"../../Core/Particle/Vector\");\nclass AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b, _c;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position ? Vector_1.Vector.create(position.x, position.y) : undefined;\n        this.options = options;\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = Utils_1.NumberUtils.getValue(options.size) * container.retina.pixelRatio;\n        this.mass = this.size * options.size.density * container.retina.reduceFactor;\n        const limit = options.size.limit;\n        this.limit = limit !== undefined ? limit * container.retina.pixelRatio * container.retina.reduceFactor : limit;\n        const color = typeof options.color === \"string\" ? { value: options.color } : options.color;\n        this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n    }\n    attract(particle) {\n        const options = this.options;\n        if (options.draggable) {\n            const mouse = this.container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = Utils_1.NumberUtils.getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition();\n        const { dx, dy, distance } = Utils_1.NumberUtils.getDistances(this.position, pos);\n        const v = Vector_1.Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * this.container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * this.container.retina.pixelRatio;\n            if (this.size > particle.getRadius() && distance < this.size - particle.getRadius()) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this.updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this.updateParticlePosition(particle, v);\n            }\n            if (this.limit === undefined || this.size < this.limit) {\n                this.size += sizeFactor;\n            }\n            this.mass += sizeFactor * this.options.size.density * this.container.retina.reduceFactor;\n        }\n        else {\n            this.updateParticlePosition(particle, v);\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        var _a, _b;\n        const container = this.container;\n        const percentPosition = this.options.position;\n        return Vector_1.Vector.create((((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100) * container.canvas.size.width, (((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100) * container.canvas.size.height);\n    }\n    updateParticlePosition(particle, v) {\n        var _a;\n        if (particle.destroyed) {\n            return;\n        }\n        const canvasSize = this.container.canvas.size;\n        if (particle.needsNewPosition) {\n            const pSize = particle.getRadius();\n            particle.position.x = Math.random() * (canvasSize.width - pSize * 2) + pSize;\n            particle.position.y = Math.random() * (canvasSize.height - pSize * 2) + pSize;\n            particle.needsNewPosition = false;\n        }\n        if (this.options.orbits) {\n            if (particle.orbit === undefined) {\n                particle.orbit = Vector_1.Vector.create(0, 0);\n                particle.orbit.length = Utils_1.NumberUtils.getDistance(particle.getPosition(), this.position);\n                particle.orbit.angle = Math.random() * Math.PI * 2;\n            }\n            if (particle.orbit.length <= this.size && !this.options.destroy) {\n                particle.orbit.length = Math.random() * Math.max(canvasSize.width, canvasSize.height);\n            }\n            particle.velocity.x = 0;\n            particle.velocity.y = 0;\n            particle.position.setTo(particle.orbit.add(this.position));\n            particle.orbit.length -= v.length;\n            particle.orbit.angle +=\n                (((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.NumberUtils.getRangeValue(particle.options.move.speed) * this.container.retina.pixelRatio) /\n                    100) *\n                    this.container.retina.reduceFactor;\n        }\n        else {\n            particle.velocity.addTo(v);\n        }\n    }\n}\nexports.AbsorberInstance = AbsorberInstance;\n"]},"metadata":{},"sourceType":"script"}