{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\n\nfunction bounceHorizontal(data) {\n  if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\" || data.outMode === Enums_1.OutMode.split) {\n    const velocity = data.particle.velocity.x;\n    let bounced = false;\n\n    if (data.direction === OutModeDirection_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === OutModeDirection_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0) {\n      const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\n      data.particle.velocity.x *= -newVelocity;\n      bounced = true;\n    }\n\n    if (!bounced) {\n      return;\n    }\n\n    const minPos = data.offset.x + data.size;\n\n    if (data.bounds.right >= data.canvasSize.width) {\n      data.particle.position.x = data.canvasSize.width - minPos;\n    } else if (data.bounds.left <= 0) {\n      data.particle.position.x = minPos;\n    }\n\n    if (data.outMode === Enums_1.OutMode.split) {\n      data.particle.destroy();\n    }\n  }\n}\n\nfunction bounceVertical(data) {\n  if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\" || data.outMode === Enums_1.OutMode.split) {\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n\n    if (data.direction === OutModeDirection_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === OutModeDirection_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0) {\n      const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\n      data.particle.velocity.y *= -newVelocity;\n      bounced = true;\n    }\n\n    if (!bounced) {\n      return;\n    }\n\n    const minPos = data.offset.y + data.size;\n\n    if (data.bounds.bottom >= data.canvasSize.height) {\n      data.particle.position.y = data.canvasSize.height - minPos;\n    } else if (data.bounds.top <= 0) {\n      data.particle.position.y = minPos;\n    }\n\n    if (data.outMode === Enums_1.OutMode.split) {\n      data.particle.destroy();\n    }\n  }\n}\n\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nclass Updater {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  update(delta) {\n    if (this.particle.destroyed) {\n      return;\n    }\n\n    this.updateLife(delta);\n\n    if (this.particle.destroyed || this.particle.spawning) {\n      return;\n    }\n\n    this.updateOpacity(delta);\n    this.updateSize(delta);\n    this.updateAngle(delta);\n    this.updateColor(delta);\n    this.updateStrokeColor(delta);\n    this.updateOutModes(delta);\n  }\n\n  updateLife(delta) {\n    const particle = this.particle;\n    let justSpawned = false;\n\n    if (particle.spawning) {\n      particle.lifeDelayTime += delta.value;\n\n      if (particle.lifeDelayTime >= particle.lifeDelay) {\n        justSpawned = true;\n        particle.spawning = false;\n        particle.lifeDelayTime = 0;\n        particle.lifeTime = 0;\n      }\n    }\n\n    if (particle.lifeDuration === -1) {\n      return;\n    }\n\n    if (!particle.spawning) {\n      if (justSpawned) {\n        particle.lifeTime = 0;\n      } else {\n        particle.lifeTime += delta.value;\n      }\n\n      if (particle.lifeTime >= particle.lifeDuration) {\n        particle.lifeTime = 0;\n\n        if (particle.livesRemaining > 0) {\n          particle.livesRemaining--;\n        }\n\n        if (particle.livesRemaining === 0) {\n          particle.destroy();\n          return;\n        }\n\n        const canvasSize = this.container.canvas.size;\n        particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\n        particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\n        particle.spawning = true;\n        particle.lifeDelayTime = 0;\n        particle.lifeTime = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n        particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n      }\n    }\n  }\n\n  updateOpacity(delta) {\n    var _a, _b;\n\n    const particle = this.particle;\n    const opacityOpt = particle.options.opacity;\n    const opacityAnim = opacityOpt.animation;\n    const minValue = Utils_1.NumberUtils.getRangeMin(opacityOpt.value);\n    const maxValue = Utils_1.NumberUtils.getRangeMax(opacityOpt.value);\n\n    if (!particle.destroyed && opacityAnim.enable && (opacityAnim.count <= 0 || particle.loops.size < opacityAnim.count)) {\n      switch (particle.opacity.status) {\n        case Enums_1.AnimationStatus.increasing:\n          if (particle.opacity.value >= maxValue) {\n            particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n            particle.loops.opacity++;\n          } else {\n            particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n          if (particle.opacity.value <= minValue) {\n            particle.opacity.status = Enums_1.AnimationStatus.increasing;\n            particle.loops.opacity++;\n          } else {\n            particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n          }\n\n          break;\n      }\n\n      checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n\n      if (!particle.destroyed) {\n        particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n      }\n    }\n  }\n\n  updateSize(delta) {\n    var _a;\n\n    const container = this.container;\n    const particle = this.particle;\n    const sizeOpt = particle.options.size;\n    const sizeAnim = sizeOpt.animation;\n    const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const minValue = Utils_1.NumberUtils.getRangeMin(sizeOpt.value) * container.retina.pixelRatio;\n    const maxValue = Utils_1.NumberUtils.getRangeMax(sizeOpt.value) * container.retina.pixelRatio;\n\n    if (!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count)) {\n      switch (particle.size.status) {\n        case Enums_1.AnimationStatus.increasing:\n          if (particle.size.value >= maxValue) {\n            particle.size.status = Enums_1.AnimationStatus.decreasing;\n            particle.loops.size++;\n          } else {\n            particle.size.value += sizeVelocity;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n          if (particle.size.value <= minValue) {\n            particle.size.status = Enums_1.AnimationStatus.increasing;\n            particle.loops.size++;\n          } else {\n            particle.size.value -= sizeVelocity;\n          }\n\n      }\n\n      checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n\n      if (!particle.destroyed) {\n        particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n      }\n    }\n  }\n\n  updateAngle(delta) {\n    var _a;\n\n    const particle = this.particle;\n    const rotate = particle.options.rotate;\n    const rotateAnimation = rotate.animation;\n    const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n\n    if (rotateAnimation.enable) {\n      switch (particle.rotate.status) {\n        case Enums_1.AnimationStatus.increasing:\n          particle.rotate.value += speed;\n\n          if (particle.rotate.value > max) {\n            particle.rotate.value -= max;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n        default:\n          particle.rotate.value -= speed;\n\n          if (particle.rotate.value < 0) {\n            particle.rotate.value += max;\n          }\n\n          break;\n      }\n    }\n  }\n\n  updateColor(delta) {\n    var _a, _b, _c;\n\n    const particle = this.particle;\n    const animationOptions = particle.options.color.animation;\n\n    if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n    }\n\n    if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n    }\n\n    if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n    }\n  }\n\n  updateStrokeColor(delta) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n    const particle = this.particle;\n\n    if (!particle.stroke.color) {\n      return;\n    }\n\n    const animationOptions = particle.stroke.color.animation;\n    const valueAnimations = animationOptions;\n\n    if (valueAnimations.enable !== undefined) {\n      const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n\n      if (hue) {\n        this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n      }\n    } else {\n      const hslAnimations = animationOptions;\n      const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n\n      if (h) {\n        this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n      }\n\n      const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n\n      if (s) {\n        this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n      }\n\n      const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n\n      if (l) {\n        this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n      }\n    }\n  }\n\n  updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n    var _a;\n\n    const colorValue = value;\n\n    if (!colorValue || !valueAnimation.enable) {\n      return;\n    }\n\n    const offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\n    const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n\n    if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n      colorValue.value += velocity;\n\n      if (decrease && colorValue.value > max) {\n        colorValue.status = Enums_1.AnimationStatus.decreasing;\n        colorValue.value -= colorValue.value % max;\n      }\n    } else {\n      colorValue.value -= velocity;\n\n      if (colorValue.value < 0) {\n        colorValue.status = Enums_1.AnimationStatus.increasing;\n        colorValue.value += colorValue.value;\n      }\n    }\n\n    if (colorValue.value > max) {\n      colorValue.value %= max;\n    }\n  }\n\n  updateOutModes(delta) {\n    var _a, _b, _c, _d;\n\n    const outModes = this.particle.options.move.outModes;\n    this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, OutModeDirection_1.OutModeDirection.bottom);\n    this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, OutModeDirection_1.OutModeDirection.left);\n    this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, OutModeDirection_1.OutModeDirection.right);\n    this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, OutModeDirection_1.OutModeDirection.top);\n  }\n\n  updateOutMode(delta, outMode, direction) {\n    const container = this.container;\n    const particle = this.particle;\n\n    switch (outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n      case \"bounceVertical\":\n      case \"bounceHorizontal\":\n      case Enums_1.OutMode.split:\n        this.updateBounce(delta, direction, outMode);\n        break;\n\n      case Enums_1.OutMode.destroy:\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle, true);\n        }\n\n        break;\n\n      case Enums_1.OutMode.out:\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          this.fixOutOfCanvasPosition(direction);\n        }\n\n        break;\n\n      case Enums_1.OutMode.none:\n        this.bounceNone(direction);\n        break;\n    }\n  }\n\n  fixOutOfCanvasPosition(direction) {\n    const container = this.container;\n    const particle = this.particle;\n    const wrap = particle.options.move.warp;\n    const canvasSize = container.canvas.size;\n    const newPos = {\n      bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n      left: -particle.getRadius() - particle.offset.x,\n      right: canvasSize.width + particle.getRadius() + particle.offset.x,\n      top: -particle.getRadius() - particle.offset.y\n    };\n    const sizeValue = particle.getRadius();\n    const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n    if (direction === OutModeDirection_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n      particle.position.x = newPos.left;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    } else if (direction === OutModeDirection_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n      particle.position.x = newPos.right;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    }\n\n    if (direction === OutModeDirection_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n\n      particle.position.y = newPos.top;\n    } else if (direction === OutModeDirection_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n\n      particle.position.y = newPos.bottom;\n    }\n  }\n\n  updateBounce(delta, direction, outMode) {\n    const container = this.container;\n    const particle = this.particle;\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta, direction);\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (handled) {\n      return;\n    }\n\n    const pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.Utils.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n    bounceHorizontal({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n    bounceVertical({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n  }\n\n  bounceNone(direction) {\n    const particle = this.particle;\n\n    if (particle.options.move.distance) {\n      return;\n    }\n\n    const gravityOptions = particle.options.move.gravity;\n    const container = this.container;\n\n    if (!gravityOptions.enable) {\n      if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n\n      if (gravityOptions.acceleration >= 0 && position.y > container.canvas.size.height && direction === OutModeDirection_1.OutModeDirection.bottom || gravityOptions.acceleration < 0 && position.y < 0 && direction === OutModeDirection_1.OutModeDirection.top) {\n        container.particles.remove(particle);\n      }\n    }\n  }\n\n}\n\nexports.Updater = Updater;","map":{"version":3,"sources":["/Users/milansachani/Desktop/Projects/MIlan-Portfolio/DamnGoodDev/React-Portfolio/node_modules/tsparticles/dist/Core/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","Enums_1","OutModeDirection_1","bounceHorizontal","data","outMode","OutMode","bounce","split","velocity","particle","x","bounced","direction","OutModeDirection","right","bounds","canvasSize","width","left","newVelocity","NumberUtils","getValue","options","horizontal","minPos","offset","size","position","destroy","bounceVertical","y","bottom","height","top","vertical","checkDestroy","minValue","maxValue","DestroyType","max","min","constructor","container","update","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateColor","updateStrokeColor","updateOutModes","justSpawned","lifeDelayTime","lifeDelay","lifeTime","lifeDuration","livesRemaining","canvas","randomInRange","setRangeValue","reset","lifeOptions","life","delay","duration","_a","_b","opacityOpt","opacity","opacityAnim","animation","getRangeMin","getRangeMax","enable","count","loops","status","AnimationStatus","increasing","decreasing","factor","clamp","sizeOpt","sizeAnim","sizeVelocity","retina","pixelRatio","rotate","rotateAnimation","speed","Math","PI","_c","animationOptions","color","h","undefined","updateColorValue","s","l","_d","_e","_f","_g","_h","_j","_k","_l","_m","stroke","valueAnimations","hue","strokeColor","hslAnimations","valueAnimation","decrease","colorValue","outModes","move","updateOutMode","default","updateBounce","Utils","isPointInside","getRadius","particles","remove","out","fixOutOfCanvasPosition","none","bounceNone","wrap","warp","newPos","sizeValue","nextBounds","calculateBounds","random","handled","plugin","plugins","particleBounce","pos","getPosition","distance","gravityOptions","gravity","acceleration"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\nfunction bounceHorizontal(data) {\n    if (data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceHorizontal ||\n        data.outMode === \"bounceHorizontal\" ||\n        data.outMode === Enums_1.OutMode.split) {\n        const velocity = data.particle.velocity.x;\n        let bounced = false;\n        if ((data.direction === OutModeDirection_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n            (data.direction === OutModeDirection_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\n            const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\n            data.particle.velocity.x *= -newVelocity;\n            bounced = true;\n        }\n        if (!bounced) {\n            return;\n        }\n        const minPos = data.offset.x + data.size;\n        if (data.bounds.right >= data.canvasSize.width) {\n            data.particle.position.x = data.canvasSize.width - minPos;\n        }\n        else if (data.bounds.left <= 0) {\n            data.particle.position.x = minPos;\n        }\n        if (data.outMode === Enums_1.OutMode.split) {\n            data.particle.destroy();\n        }\n    }\n}\nfunction bounceVertical(data) {\n    if (data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceVertical ||\n        data.outMode === \"bounceVertical\" ||\n        data.outMode === Enums_1.OutMode.split) {\n        const velocity = data.particle.velocity.y;\n        let bounced = false;\n        if ((data.direction === OutModeDirection_1.OutModeDirection.bottom &&\n            data.bounds.bottom >= data.canvasSize.height &&\n            velocity > 0) ||\n            (data.direction === OutModeDirection_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\n            const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\n            data.particle.velocity.y *= -newVelocity;\n            bounced = true;\n        }\n        if (!bounced) {\n            return;\n        }\n        const minPos = data.offset.y + data.size;\n        if (data.bounds.bottom >= data.canvasSize.height) {\n            data.particle.position.y = data.canvasSize.height - minPos;\n        }\n        else if (data.bounds.top <= 0) {\n            data.particle.position.y = minPos;\n        }\n        if (data.outMode === Enums_1.OutMode.split) {\n            data.particle.destroy();\n        }\n    }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n    switch (destroy) {\n        case Enums_1.DestroyType.max:\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case Enums_1.DestroyType.min:\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nclass Updater {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    update(delta) {\n        if (this.particle.destroyed) {\n            return;\n        }\n        this.updateLife(delta);\n        if (this.particle.destroyed || this.particle.spawning) {\n            return;\n        }\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.updateColor(delta);\n        this.updateStrokeColor(delta);\n        this.updateOutModes(delta);\n    }\n    updateLife(delta) {\n        const particle = this.particle;\n        let justSpawned = false;\n        if (particle.spawning) {\n            particle.lifeDelayTime += delta.value;\n            if (particle.lifeDelayTime >= particle.lifeDelay) {\n                justSpawned = true;\n                particle.spawning = false;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n            }\n        }\n        if (particle.lifeDuration === -1) {\n            return;\n        }\n        if (!particle.spawning) {\n            if (justSpawned) {\n                particle.lifeTime = 0;\n            }\n            else {\n                particle.lifeTime += delta.value;\n            }\n            if (particle.lifeTime >= particle.lifeDuration) {\n                particle.lifeTime = 0;\n                if (particle.livesRemaining > 0) {\n                    particle.livesRemaining--;\n                }\n                if (particle.livesRemaining === 0) {\n                    particle.destroy();\n                    return;\n                }\n                const canvasSize = this.container.canvas.size;\n                particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\n                particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\n                particle.spawning = true;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n                particle.reset();\n                const lifeOptions = particle.options.life;\n                particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n                particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n            }\n        }\n    }\n    updateOpacity(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const opacityOpt = particle.options.opacity;\n        const opacityAnim = opacityOpt.animation;\n        const minValue = Utils_1.NumberUtils.getRangeMin(opacityOpt.value);\n        const maxValue = Utils_1.NumberUtils.getRangeMax(opacityOpt.value);\n        if (!particle.destroyed &&\n            opacityAnim.enable &&\n            (opacityAnim.count <= 0 || particle.loops.size < opacityAnim.count)) {\n            switch (particle.opacity.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    if (particle.opacity.value >= maxValue) {\n                        particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n                        particle.loops.opacity++;\n                    }\n                    else {\n                        particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                    if (particle.opacity.value <= minValue) {\n                        particle.opacity.status = Enums_1.AnimationStatus.increasing;\n                        particle.loops.opacity++;\n                    }\n                    else {\n                        particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n                    }\n                    break;\n            }\n            checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n            if (!particle.destroyed) {\n                particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n            }\n        }\n    }\n    updateSize(delta) {\n        var _a;\n        const container = this.container;\n        const particle = this.particle;\n        const sizeOpt = particle.options.size;\n        const sizeAnim = sizeOpt.animation;\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const minValue = Utils_1.NumberUtils.getRangeMin(sizeOpt.value) * container.retina.pixelRatio;\n        const maxValue = Utils_1.NumberUtils.getRangeMax(sizeOpt.value) * container.retina.pixelRatio;\n        if (!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count)) {\n            switch (particle.size.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    if (particle.size.value >= maxValue) {\n                        particle.size.status = Enums_1.AnimationStatus.decreasing;\n                        particle.loops.size++;\n                    }\n                    else {\n                        particle.size.value += sizeVelocity;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                    if (particle.size.value <= minValue) {\n                        particle.size.status = Enums_1.AnimationStatus.increasing;\n                        particle.loops.size++;\n                    }\n                    else {\n                        particle.size.value -= sizeVelocity;\n                    }\n            }\n            checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n            if (!particle.destroyed) {\n                particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n            }\n        }\n    }\n    updateAngle(delta) {\n        var _a;\n        const particle = this.particle;\n        const rotate = particle.options.rotate;\n        const rotateAnimation = rotate.animation;\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (rotateAnimation.enable) {\n            switch (particle.rotate.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    particle.rotate.value += speed;\n                    if (particle.rotate.value > max) {\n                        particle.rotate.value -= max;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                default:\n                    particle.rotate.value -= speed;\n                    if (particle.rotate.value < 0) {\n                        particle.rotate.value += max;\n                    }\n                    break;\n            }\n        }\n    }\n    updateColor(delta) {\n        var _a, _b, _c;\n        const particle = this.particle;\n        const animationOptions = particle.options.color.animation;\n        if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n        }\n        if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n        }\n        if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n        }\n    }\n    updateStrokeColor(delta) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const particle = this.particle;\n        if (!particle.stroke.color) {\n            return;\n        }\n        const animationOptions = particle.stroke.color.animation;\n        const valueAnimations = animationOptions;\n        if (valueAnimations.enable !== undefined) {\n            const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n            if (hue) {\n                this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n            }\n        }\n        else {\n            const hslAnimations = animationOptions;\n            const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n            if (h) {\n                this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n            }\n            const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n            if (s) {\n                this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n            }\n            const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n            if (l) {\n                this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n            }\n        }\n    }\n    updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n        var _a;\n        const colorValue = value;\n        if (!colorValue || !valueAnimation.enable) {\n            return;\n        }\n        const offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\n        const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n        if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n            colorValue.value += velocity;\n            if (decrease && colorValue.value > max) {\n                colorValue.status = Enums_1.AnimationStatus.decreasing;\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n        else {\n            colorValue.value -= velocity;\n            if (colorValue.value < 0) {\n                colorValue.status = Enums_1.AnimationStatus.increasing;\n                colorValue.value += colorValue.value;\n            }\n        }\n        if (colorValue.value > max) {\n            colorValue.value %= max;\n        }\n    }\n    updateOutModes(delta) {\n        var _a, _b, _c, _d;\n        const outModes = this.particle.options.move.outModes;\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, OutModeDirection_1.OutModeDirection.bottom);\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, OutModeDirection_1.OutModeDirection.left);\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, OutModeDirection_1.OutModeDirection.right);\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, OutModeDirection_1.OutModeDirection.top);\n    }\n    updateOutMode(delta, outMode, direction) {\n        const container = this.container;\n        const particle = this.particle;\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n            case Enums_1.OutMode.split:\n                this.updateBounce(delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    container.particles.remove(particle, true);\n                }\n                break;\n            case Enums_1.OutMode.out:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    this.fixOutOfCanvasPosition(direction);\n                }\n                break;\n            case Enums_1.OutMode.none:\n                this.bounceNone(direction);\n                break;\n        }\n    }\n    fixOutOfCanvasPosition(direction) {\n        const container = this.container;\n        const particle = this.particle;\n        const wrap = particle.options.move.warp;\n        const canvasSize = container.canvas.size;\n        const newPos = {\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        };\n        const sizeValue = particle.getRadius();\n        const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n        if (direction === OutModeDirection_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n            particle.position.x = newPos.left;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        else if (direction === OutModeDirection_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        if (direction === OutModeDirection_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.top;\n        }\n        else if (direction === OutModeDirection_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.bottom;\n        }\n    }\n    updateBounce(delta, direction, outMode) {\n        const container = this.container;\n        const particle = this.particle;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.Utils.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    bounceNone(direction) {\n        const particle = this.particle;\n        if (particle.options.move.distance) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity;\n        const container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((gravityOptions.acceleration >= 0 &&\n                position.y > container.canvas.size.height &&\n                direction === OutModeDirection_1.OutModeDirection.bottom) ||\n                (gravityOptions.acceleration < 0 && position.y < 0 && direction === OutModeDirection_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.Updater = Updater;\n"]},"metadata":{},"sourceType":"script"}