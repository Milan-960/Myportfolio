'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var _require = require('react-native'),
    View = _require.View,
    Linking = _require.Linking,
    Dimensions = _require.Dimensions,
    Image = _require.Image,
    Text = _require.Text;

var internals = require('@sanity/block-content-to-hyperscript/internals');

var _require2 = require('./react-native-styles'),
    styles = _require2.styles,
    textStyles = _require2.textStyles;

var getImageUrl = internals.getImageUrl,
    getSerializers = internals.getSerializers,
    mergeSerializers = internals.mergeSerializers;

var h = React.createElement;

var DynamicImage = function (_React$PureComponent) {
  _inherits(DynamicImage, _React$PureComponent);

  function DynamicImage(props) {
    _classCallCheck(this, DynamicImage);

    var _this = _possibleConstructorReturn(this, (DynamicImage.__proto__ || Object.getPrototypeOf(DynamicImage)).call(this, props));

    _this.state = { size: null };

    var imgWidth = props.imgWidth,
        imgHeight = props.imgHeight;

    if (imgWidth) {
      _this.state = { size: _this.constrainDimensions({ width: imgWidth, height: imgHeight }) };
    } else {
      Image.getSize(props.source.uri, _this.handleSizeFetched.bind(_this));
    }
    return _this;
  }

  // eslint-disable-next-line class-methods-use-this


  _createClass(DynamicImage, [{
    key: 'constrainDimensions',
    value: function constrainDimensions(img) {
      var windowDimensions = Dimensions.get('window');
      var maxWidth = windowDimensions.width;
      var maxHeight = windowDimensions.height;
      var ratio = Math.min(maxWidth / img.width, maxHeight / img.height);

      return {
        width: img.width * ratio,
        height: img.height * ratio
      };
    }
  }, {
    key: 'handleSizeFetched',
    value: function handleSizeFetched(width, height) {
      var size = this.constrainDimensions({ width: width, height: height });
      size.maxWidth = '100%';
      this.setState({ size: size });
    }
  }, {
    key: 'render',
    value: function render() {
      return this.state.size ? h(Image, Object.assign({}, this.props, { style: this.state.size })) : h(View);
    }
  }]);

  return DynamicImage;
}(React.PureComponent);

var BlockTypeSerializer = function BlockTypeSerializer(props) {
  var style = props.node.style || 'normal';
  // Wrap in a text element to make children display inline
  return h(View, { style: styles[style] }, h(Text, { style: textStyles[style] }, props.children));
};

var RnImageSerializer = function RnImageSerializer(props) {
  var docId = props.node.asset._ref || '';

  var _docId$replace$split$ = docId.replace(/.*?-(\d+x\d+)-[a-z]+$/, '$1').split('x').map(function (num) {
    return parseInt(num, 10);
  }),
      _docId$replace$split$2 = _slicedToArray(_docId$replace$split$, 2),
      imgWidth = _docId$replace$split$2[0],
      imgHeight = _docId$replace$split$2[1];

  return h(DynamicImage, {
    source: { uri: getImageUrl(props) },
    imgWidth: imgWidth,
    imgHeight: imgHeight
  });
};

var markSerializer = function markSerializer(style, props) {
  return h(Text, { style: textStyles[style] }, props.children);
};

var LinkSerializer = function LinkSerializer(props) {
  var onPress = function onPress() {
    return Linking.openURL(props.mark.href);
  };
  return h(Text, { onPress: onPress, style: textStyles.link }, props.children);
};

var ListSerializer = function ListSerializer(props) {
  var marginStyles = props.level > 1 ? { marginVertical: 0 } : {};
  return h(View, { style: [styles.list, { paddingLeft: 16 * props.level }, marginStyles] }, props.children);
};

var ListItemSerializer = function ListItemSerializer(props) {
  var type = props.node.listItem;
  var children = !props.node.style || props.node.style === 'normal' ? // Don't wrap plain text in paragraphs inside of a list item
  props.children : // But wrap any other style in whatever the block serializer says to use
  h(props.serializers.types.block, props, props.children);

  if (type === 'bullet') {
    return h(View, { key: props.node._key, style: styles.listItemWrapper }, h(Text, { style: styles.bulletlistIcon }, '\xB7'), h(View, { style: styles.listItem }, children));
  }

  if (type === 'number') {
    return h(View, { key: props.node._key, style: styles.listItemWrapper }, h(Text, { style: styles.numberlistIcon }, props.index + 1 + '. '), h(View, { style: styles.listItem }, children));
  }

  return h(View, { key: props.node._key, style: styles.listItem }, children);
};

var HardBreakSerializer = function HardBreakSerializer() {
  return h(Text, null, '\n');
};

var _getSerializers = getSerializers(h),
    defaultSerializers = _getSerializers.defaultSerializers,
    serializeSpan = _getSerializers.serializeSpan;

var serializers = mergeSerializers(defaultSerializers, {
  // Common overrides
  types: {
    block: BlockTypeSerializer,
    image: RnImageSerializer
  },

  marks: {
    strong: markSerializer.bind(null, 'strong'),
    em: markSerializer.bind(null, 'em'),
    code: markSerializer.bind(null, 'code'),
    underline: markSerializer.bind(null, 'underline'),
    'strike-through': markSerializer.bind(null, 'strike-through'),
    link: LinkSerializer
  },

  list: ListSerializer,
  listItem: ListItemSerializer,
  hardBreak: HardBreakSerializer,
  container: View,
  unknownMark: Text,
  text: Text,
  empty: View
});

module.exports = {
  serializers: serializers,
  serializeSpan: serializeSpan,
  renderProps: { listNestMode: 'normal' }
};
//# sourceMappingURL=react-native.js.map