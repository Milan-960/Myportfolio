{"version":3,"sources":["../../src/targets/react-native.js"],"names":["React","require","View","Linking","Dimensions","Image","Text","internals","styles","textStyles","getImageUrl","getSerializers","mergeSerializers","h","createElement","DynamicImage","props","state","size","imgWidth","imgHeight","constrainDimensions","width","height","getSize","source","uri","handleSizeFetched","bind","img","windowDimensions","get","maxWidth","maxHeight","ratio","Math","min","setState","Object","assign","style","PureComponent","BlockTypeSerializer","node","children","RnImageSerializer","docId","asset","_ref","replace","split","map","num","parseInt","markSerializer","LinkSerializer","onPress","openURL","mark","href","link","ListSerializer","marginStyles","level","marginVertical","list","paddingLeft","ListItemSerializer","type","listItem","serializers","types","block","key","_key","listItemWrapper","bulletlistIcon","numberlistIcon","index","HardBreakSerializer","defaultSerializers","serializeSpan","image","marks","strong","em","code","underline","hardBreak","container","unknownMark","text","empty","module","exports","renderProps","listNestMode"],"mappings":"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","file":"react-native.js","sourcesContent":["const React = require('react')\nconst {View, Linking, Dimensions, Image, Text} = require('react-native')\nconst internals = require('@sanity/block-content-to-hyperscript/internals')\nconst {styles, textStyles} = require('./react-native-styles')\n\nconst {getImageUrl, getSerializers, mergeSerializers} = internals\nconst h = React.createElement\n\nclass DynamicImage extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {size: null}\n\n    const {imgWidth, imgHeight} = props\n    if (imgWidth) {\n      this.state = {size: this.constrainDimensions({width: imgWidth, height: imgHeight})}\n    } else {\n      Image.getSize(props.source.uri, this.handleSizeFetched.bind(this))\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  constrainDimensions(img) {\n    const windowDimensions = Dimensions.get('window')\n    const maxWidth = windowDimensions.width\n    const maxHeight = windowDimensions.height\n    const ratio = Math.min(maxWidth / img.width, maxHeight / img.height)\n\n    return {\n      width: img.width * ratio,\n      height: img.height * ratio,\n    }\n  }\n\n  handleSizeFetched(width, height) {\n    const size = this.constrainDimensions({width, height})\n    size.maxWidth = '100%'\n    this.setState({size})\n  }\n\n  render() {\n    return this.state.size\n      ? h(Image, Object.assign({}, this.props, {style: this.state.size}))\n      : h(View)\n  }\n}\n\nconst BlockTypeSerializer = (props) => {\n  const style = props.node.style || 'normal'\n  // Wrap in a text element to make children display inline\n  return h(View, {style: styles[style]}, h(Text, {style: textStyles[style]}, props.children))\n}\n\nconst RnImageSerializer = (props) => {\n  const docId = props.node.asset._ref || ''\n  const [imgWidth, imgHeight] = docId\n    .replace(/.*?-(\\d+x\\d+)-[a-z]+$/, '$1')\n    .split('x')\n    .map((num) => parseInt(num, 10))\n\n  return h(DynamicImage, {\n    source: {uri: getImageUrl(props)},\n    imgWidth,\n    imgHeight,\n  })\n}\n\nconst markSerializer = (style, props) => {\n  return h(Text, {style: textStyles[style]}, props.children)\n}\n\nconst LinkSerializer = (props) => {\n  const onPress = () => Linking.openURL(props.mark.href)\n  return h(Text, {onPress, style: textStyles.link}, props.children)\n}\n\nconst ListSerializer = (props) => {\n  const marginStyles = props.level > 1 ? {marginVertical: 0} : {}\n  return h(\n    View,\n    {style: [styles.list, {paddingLeft: 16 * props.level}, marginStyles]},\n    props.children\n  )\n}\n\nconst ListItemSerializer = (props) => {\n  const type = props.node.listItem\n  const children =\n    !props.node.style || props.node.style === 'normal'\n      ? // Don't wrap plain text in paragraphs inside of a list item\n        props.children\n      : // But wrap any other style in whatever the block serializer says to use\n        h(props.serializers.types.block, props, props.children)\n\n  if (type === 'bullet') {\n    return h(\n      View,\n      {key: props.node._key, style: styles.listItemWrapper},\n      h(Text, {style: styles.bulletlistIcon}, '\\u00B7'),\n      h(View, {style: styles.listItem}, children)\n    )\n  }\n\n  if (type === 'number') {\n    return h(\n      View,\n      {key: props.node._key, style: styles.listItemWrapper},\n      h(Text, {style: styles.numberlistIcon}, `${props.index + 1}. `),\n      h(View, {style: styles.listItem}, children)\n    )\n  }\n\n  return h(View, {key: props.node._key, style: styles.listItem}, children)\n}\n\nconst HardBreakSerializer = () => h(Text, null, '\\n')\n\nconst {defaultSerializers, serializeSpan} = getSerializers(h)\nconst serializers = mergeSerializers(defaultSerializers, {\n  // Common overrides\n  types: {\n    block: BlockTypeSerializer,\n    image: RnImageSerializer,\n  },\n\n  marks: {\n    strong: markSerializer.bind(null, 'strong'),\n    em: markSerializer.bind(null, 'em'),\n    code: markSerializer.bind(null, 'code'),\n    underline: markSerializer.bind(null, 'underline'),\n    'strike-through': markSerializer.bind(null, 'strike-through'),\n    link: LinkSerializer,\n  },\n\n  list: ListSerializer,\n  listItem: ListItemSerializer,\n  hardBreak: HardBreakSerializer,\n  container: View,\n  unknownMark: Text,\n  text: Text,\n  empty: View,\n})\n\nmodule.exports = {\n  serializers,\n  serializeSpan,\n  renderProps: {listNestMode: 'normal'},\n}\n"]}