{"version":3,"sources":["../src/getImageUrl.js"],"names":["generateHelpUrl","require","urlBuilder","objectAssign","enc","encodeURIComponent","materializeError","getQueryString","options","query","imageOptions","keys","Object","length","params","map","key","join","buildUrl","props","node","projectId","dataset","asset","Error","url","ref","_ref","image","toString","module","exports"],"mappings":";;AAAA,IAAMA,eAAe,GAAGC,OAAO,CAAC,2BAAD,CAA/B;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,mBAAD,CAA1B;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA5B;;AAEA,IAAMG,GAAG,GAAGC,kBAAZ;AACA,IAAMC,gBAAgB,yKAIMN,eAAe,CAAC,mCAAD,CAJrB,CAAtB;;AAMA,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,OAAO,EAAI;AAChC,MAAMC,KAAK,GAAGD,OAAO,CAACE,YAAtB;AACA,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,KAAZ,CAAb;;AACA,MAAI,CAACE,IAAI,CAACE,MAAV,EAAkB;AAChB,WAAO,EAAP;AACD;;AAED,MAAMC,MAAM,GAAGH,IAAI,CAACI,GAAL,CAAS,UAAAC,GAAG;AAAA,qBAAOZ,GAAG,CAACY,GAAD,CAAV,cAAmBZ,GAAG,CAACK,KAAK,CAACO,GAAD,CAAN,CAAtB;AAAA,GAAZ,CAAf;AACA,oBAAWF,MAAM,CAACG,IAAP,CAAY,GAAZ,CAAX;AACD,CATD;;AAWA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AAAA,MACjBC,IADiB,GACAD,KADA,CACjBC,IADiB;AAAA,MACXZ,OADW,GACAW,KADA,CACXX,OADW;AAAA,MAEjBa,SAFiB,GAEKb,OAFL,CAEjBa,SAFiB;AAAA,MAENC,OAFM,GAEKd,OAFL,CAENc,OAFM;AAGxB,MAAMC,KAAK,GAAGH,IAAI,CAACG,KAAnB;;AAEA,MAAI,CAACA,KAAL,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,MAAID,KAAK,CAACE,GAAV,EAAe;AACb,WAAOF,KAAK,CAACE,GAAN,GAAYlB,cAAc,CAACC,OAAD,CAAjC;AACD;;AAED,MAAI,CAACa,SAAD,IAAc,CAACC,OAAnB,EAA4B;AAC1B,UAAM,IAAIE,KAAJ,CAAUlB,gBAAV,CAAN;AACD;;AAED,MAAMoB,GAAG,GAAGH,KAAK,CAACI,IAAlB;;AACA,MAAI,CAACD,GAAL,EAAU;AACR,UAAM,IAAIF,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAED,SAAOtB,UAAU,CAACC,YAAY,CAAC;AAACkB,IAAAA,SAAS,EAATA,SAAD;AAAYC,IAAAA,OAAO,EAAPA;AAAZ,GAAD,EAAuBd,OAAO,CAACE,YAAR,IAAwB,EAA/C,CAAb,CAAV,CACJkB,KADI,CACER,IADF,EAEJS,QAFI,EAAP;AAGD,CAzBD;;AA2BAC,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["const generateHelpUrl = require('@sanity/generate-help-url')\nconst urlBuilder = require('@sanity/image-url')\nconst objectAssign = require('object-assign')\n\nconst enc = encodeURIComponent\nconst materializeError = `You must either:\n  - Pass \\`projectId\\` and \\`dataset\\` to the block renderer\n  - Materialize images to include the \\`url\\` field.\n\nFor more information, see ${generateHelpUrl('block-content-image-materializing')}`\n\nconst getQueryString = options => {\n  const query = options.imageOptions\n  const keys = Object.keys(query)\n  if (!keys.length) {\n    return ''\n  }\n\n  const params = keys.map(key => `${enc(key)}=${enc(query[key])}`)\n  return `?${params.join('&')}`\n}\n\nconst buildUrl = props => {\n  const {node, options} = props\n  const {projectId, dataset} = options\n  const asset = node.asset\n\n  if (!asset) {\n    throw new Error('Image does not have required `asset` property')\n  }\n\n  if (asset.url) {\n    return asset.url + getQueryString(options)\n  }\n\n  if (!projectId || !dataset) {\n    throw new Error(materializeError)\n  }\n\n  const ref = asset._ref\n  if (!ref) {\n    throw new Error('Invalid image reference in block, no `_ref` found on `asset`')\n  }\n\n  return urlBuilder(objectAssign({projectId, dataset}, options.imageOptions || {}))\n    .image(node)\n    .toString()\n}\n\nmodule.exports = buildUrl\n"],"file":"getImageUrl.js"}