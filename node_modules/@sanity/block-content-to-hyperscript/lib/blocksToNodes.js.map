{"version":3,"sources":["../src/blocksToNodes.js"],"names":["objectAssign","require","buildMarksTree","nestLists","generateKeys","mergeSerializers","optionProps","isDefined","val","defaults","imageOptions","ignoreUnknownTypes","blocksToNodes","h","properties","defaultSerializers","serializeSpan","props","rawBlocks","Array","isArray","blocks","keyedBlocks","listNestMode","serializers","options","reduce","opts","key","value","serializeNode","node","index","siblings","isInline","isList","serializeList","isListItem","serializeListItem","findListItemIndex","isSpan","serializeBlock","i","length","block","tree","children","map","blockProps","_key","listItem","list","type","level","renderContainerOnSingleChild","Boolean","nodes","containerProps","className","container","empty","_type","marks","module","exports"],"mappings":"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","sourcesContent":["const objectAssign = require('object-assign')\nconst buildMarksTree = require('./buildMarksTree')\nconst nestLists = require('./nestLists')\nconst generateKeys = require('./generateKeys')\nconst mergeSerializers = require('./mergeSerializers')\n\n// Properties to extract from props and pass to serializers as options\nconst optionProps = ['projectId', 'dataset', 'imageOptions', 'ignoreUnknownTypes']\nconst isDefined = val => typeof val !== 'undefined'\nconst defaults = {imageOptions: {}, ignoreUnknownTypes: true}\n\nfunction blocksToNodes(h, properties, defaultSerializers, serializeSpan) {\n  const props = objectAssign({}, defaults, properties)\n  const rawBlocks = Array.isArray(props.blocks) ? props.blocks : [props.blocks]\n  const keyedBlocks = generateKeys(rawBlocks)\n  const blocks = nestLists(keyedBlocks, props.listNestMode)\n  const serializers = mergeSerializers(defaultSerializers, props.serializers || {})\n\n  const options = optionProps.reduce((opts, key) => {\n    const value = props[key]\n    if (isDefined(value)) {\n      opts[key] = value\n    }\n    return opts\n  }, {})\n\n  function serializeNode(node, index, siblings, isInline) {\n    if (isList(node)) {\n      return serializeList(node)\n    }\n\n    if (isListItem(node)) {\n      return serializeListItem(node, findListItemIndex(node, siblings))\n    }\n\n    if (isSpan(node)) {\n      return serializeSpan(node, serializers, index, {serializeNode})\n    }\n\n    return serializeBlock(node, index, isInline)\n  }\n\n  function findListItemIndex(node, siblings) {\n    let index = 0\n    for (let i = 0; i < siblings.length; i++) {\n      if (siblings[i] === node) {\n        return index\n      }\n\n      if (!isListItem(siblings[i])) {\n        continue\n      }\n\n      index++\n    }\n\n    return index\n  }\n\n  function serializeBlock(block, index, isInline) {\n    const tree = buildMarksTree(block)\n    const children = tree.map((node, i, siblings) => serializeNode(node, i, siblings, true))\n    const blockProps = {\n      key: block._key || `block-${index}`,\n      node: block,\n      isInline,\n      serializers,\n      options\n    }\n\n    return h(serializers.block, blockProps, children)\n  }\n\n  function serializeListItem(block, index) {\n    const key = block._key\n    const tree = buildMarksTree(block)\n    const children = tree.map(serializeNode)\n    return h(serializers.listItem, {node: block, serializers, index, key, options}, children)\n  }\n\n  function serializeList(list) {\n    const type = list.listItem\n    const level = list.level\n    const key = list._key\n    const children = list.children.map(serializeNode)\n    return h(serializers.list, {key, level, type, options}, children)\n  }\n\n  // Default to false, so `undefined` will evaluate to the default here\n  const renderContainerOnSingleChild = Boolean(props.renderContainerOnSingleChild)\n\n  const nodes = blocks.map(serializeNode)\n  if (renderContainerOnSingleChild || nodes.length > 1) {\n    const containerProps = props.className ? {className: props.className} : {}\n    return h(serializers.container, containerProps, nodes)\n  }\n\n  if (nodes[0]) {\n    return nodes[0]\n  }\n\n  return typeof serializers.empty === 'function' ? h(serializers.empty) : serializers.empty\n}\n\nfunction isList(block) {\n  return block._type === 'list' && block.listItem\n}\n\nfunction isListItem(block) {\n  return block._type === 'block' && block.listItem\n}\n\nfunction isSpan(block) {\n  return typeof block === 'string' || block.marks || block._type === 'span'\n}\n\nmodule.exports = blocksToNodes\n"],"file":"blocksToNodes.js"}