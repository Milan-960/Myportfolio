/* IMPORTANT
 * This snapshot file is auto-generated, but designed for humans.
 * It should be checked into source control and tracked carefully.
 * Re-generate by setting TAP_SNAPSHOT=1 and running tests.
 * Make sure to inspect the output below.  Do not ignore changes!
 */'use strict';function cov_j17praih5(){var path="/Users/ruyadorno/Documents/workspace/cli/main/packages/libnpmdiff/tap-snapshots/test/format-diff.js.test.cjs";var hash="4e38933a32a7443bcd5a1f9de34203ebbb5e731b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/ruyadorno/Documents/workspace/cli/main/packages/libnpmdiff/tap-snapshots/test/format-diff.js.test.cjs",statementMap:{"0":{start:{line:8,column:0},end:{line:17,column:1}},"1":{start:{line:19,column:0},end:{line:24,column:1}},"2":{start:{line:26,column:0},end:{line:33,column:1}},"3":{start:{line:35,column:0},end:{line:44,column:1}},"4":{start:{line:46,column:0},end:{line:59,column:1}},"5":{start:{line:61,column:0},end:{line:76,column:1}},"6":{start:{line:78,column:0},end:{line:97,column:1}},"7":{start:{line:99,column:0},end:{line:109,column:1}},"8":{start:{line:111,column:0},end:{line:120,column:1}},"9":{start:{line:122,column:0},end:{line:132,column:1}},"10":{start:{line:134,column:0},end:{line:136,column:1}},"11":{start:{line:138,column:0},end:{line:147,column:1}},"12":{start:{line:149,column:0},end:{line:152,column:1}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4e38933a32a7443bcd5a1f9de34203ebbb5e731b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_j17praih5=function(){return actualCoverage;};}return actualCoverage;}cov_j17praih5();cov_j17praih5().s[0]++;exports[`test/format-diff.js TAP added file > should output expected added file diff result 1`]=`
diff --git a/foo.js b/foo.js
new file mode 100755
index v1.0.0..v2.0.0 
--- a/foo.js
+++ b/foo.js
@@ -0,0 +1,2 @@
+"use strict"
+module.exports = "foo"
`;cov_j17praih5().s[1]++;exports[`test/format-diff.js TAP binary file > should output expected bin file diff result 1`]=`
diff --git a/foo.jpg b/foo.jpg
index v1.0.0..v2.0.0 100644
--- a/foo.jpg
+++ b/foo.jpg
`;cov_j17praih5().s[2]++;exports[`test/format-diff.js TAP changed file mode > should output expected changed file mode diff result 1`]=`
diff --git a/foo.js b/foo.js
old mode 100644
new mode 100755
index v1.0.0..v2.0.0 
--- a/foo.js
+++ b/foo.js
`;cov_j17praih5().s[3]++;exports[`test/format-diff.js TAP colored output > should output expected colored diff result 1`]=`
[33mdiff --git a/foo.js b/foo.js[39m
[33mindex v1.0.0..v2.0.0 100644[39m
[33m--- a/foo.js[39m
[33m+++ b/foo.js[39m
[35m@@ -1,2 +1,2 @@[39m
 "use strict"
[31m-module.exports = "foo"[39m
[32m+module.exports = "foobar"[39m
`;cov_j17praih5().s[4]++;exports[`test/format-diff.js TAP diff options > should output expected diff result 1`]=`
diff --git before/foo.js after/foo.js
index v1.0.0..v2.0.0 100644
--- before/foo.js
+++ after/foo.js
@@ -4,4 +4,6 @@
 const c = "c"
+const d = "d"
 module.exports = () => a+
 b+
-c
+c+
+d
`;cov_j17praih5().s[5]++;exports[`test/format-diff.js TAP diffUnified=0 > should output no context lines in output 1`]=`
diff --git a/foo.js b/foo.js
index v1.0.0..v2.0.0 100644
--- a/foo.js
+++ b/foo.js
@@ -3,2 +3,3 @@
-const b = "b"
-const c = "c"
+  const b = "b"
+  const c = "c"
+  const d = "d"
@@ -7,1 +8,2 @@
-c
+c+
+d
`;cov_j17praih5().s[6]++;exports[`test/format-diff.js TAP format multiple files patch > should output expected result for multiple files 1`]=`
diff --git a/foo.js b/foo.js
index v1.0.0..v1.1.1 100644
--- a/foo.js
+++ b/foo.js
@@ -1,2 +1,2 @@
 "use strict"
-module.exports = "foo"
+module.exports = "foobar"
diff --git a/lib/utils.js b/lib/utils.js
index v1.0.0..v1.1.1 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -1,3 +1,4 @@
 "use strict"
 const bar = require("./bar.js")
-module.exports = () => bar
+module.exports =
+  () => bar + "util"
`;cov_j17praih5().s[7]++;exports[`test/format-diff.js TAP format removed file > should output expected removed file diff result 1`]=`
diff --git a/foo.js b/foo.js
deleted file mode 100644
index v1.0.0..v2.0.0 
--- a/foo.js
+++ b/foo.js
@@ -1,2 +0,0 @@
-"use strict"
-module.exports = "foo"
/ No newline at end of file
`;cov_j17praih5().s[8]++;exports[`test/format-diff.js TAP format simple diff > should output expected diff result 1`]=`
diff --git a/foo.js b/foo.js
index v1.0.0..v2.0.0 100644
--- a/foo.js
+++ b/foo.js
@@ -1,2 +1,2 @@
 "use strict"
-module.exports = "foo"
+module.exports = "foobar"
`;cov_j17praih5().s[9]++;exports[`test/format-diff.js TAP noPrefix > should output result with no prefixes 1`]=`
diff --git foo.js foo.js
index v1.0.0..v2.0.0 100644
Index: foo.js
--- foo.js
+++ foo.js
@@ -1,2 +1,2 @@
 "use strict"
-module.exports = "foo"
+module.exports = "foobar"
`;cov_j17praih5().s[10]++;exports[`test/format-diff.js TAP nothing to diff > should output empty result 1`]=`

`;cov_j17praih5().s[11]++;exports[`test/format-diff.js TAP respect --tag-version-prefix option > should output expected diff result 1`]=`
diff --git a/foo.js b/foo.js
index b1.0.0..b2.0.0 100644
--- a/foo.js
+++ b/foo.js
@@ -1,2 +1,2 @@
 "use strict"
-module.exports = "foo"
+module.exports = "foobar"
`;cov_j17praih5().s[12]++;exports[`test/format-diff.js TAP using --name-only option > should output expected diff result 1`]=`
foo.js
lib/utils.js
`;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1hdC1kaWZmLmpzLnRlc3QuY2pzIl0sIm5hbWVzIjpbImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLGEsaStDQVNZO2dIQVJaQSxPQUFPLENBQUUsc0ZBQUYsQ0FBUCxDQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FUQSxDLHVCQVdBQSxPQUFPLENBQUUscUZBQUYsQ0FBUCxDQUFrRztBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBTEEsQyx1QkFPQUEsT0FBTyxDQUFFLG9HQUFGLENBQVAsQ0FBaUg7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FQQSxDLHVCQVNBQSxPQUFPLENBQUUsdUZBQUYsQ0FBUCxDQUFvRztBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FUQSxDLHVCQVdBQSxPQUFPLENBQUUsNkVBQUYsQ0FBUCxDQUEwRjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQWJBLEMsdUJBZUFBLE9BQU8sQ0FBRSxvRkFBRixDQUFQLENBQWlHO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQWZBLEMsdUJBaUJBQSxPQUFPLENBQUUsMEdBQUYsQ0FBUCxDQUF1SDtBQUN2SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQW5CQSxDLHVCQXFCQUEsT0FBTyxDQUFFLGlHQUFGLENBQVAsQ0FBOEc7QUFDOUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FWQSxDLHVCQVlBQSxPQUFPLENBQUUsbUZBQUYsQ0FBUCxDQUFnRztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FUQSxDLHVCQVdBQSxPQUFPLENBQUUsNEVBQUYsQ0FBUCxDQUF5RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQVZBLEMsd0JBWUFBLE9BQU8sQ0FBRSx3RUFBRixDQUFQLENBQXFGO0FBQ3JGO0FBQ0EsQ0FGQSxDLHdCQUlBQSxPQUFPLENBQUUsb0dBQUYsQ0FBUCxDQUFpSDtBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FUQSxDLHdCQVdBQSxPQUFPLENBQUUseUZBQUYsQ0FBUCxDQUFzRztBQUN0RztBQUNBO0FBQ0EsQ0FIQSIsInNvdXJjZXNDb250ZW50IjpbIi8qIElNUE9SVEFOVFxuICogVGhpcyBzbmFwc2hvdCBmaWxlIGlzIGF1dG8tZ2VuZXJhdGVkLCBidXQgZGVzaWduZWQgZm9yIGh1bWFucy5cbiAqIEl0IHNob3VsZCBiZSBjaGVja2VkIGludG8gc291cmNlIGNvbnRyb2wgYW5kIHRyYWNrZWQgY2FyZWZ1bGx5LlxuICogUmUtZ2VuZXJhdGUgYnkgc2V0dGluZyBUQVBfU05BUFNIT1Q9MSBhbmQgcnVubmluZyB0ZXN0cy5cbiAqIE1ha2Ugc3VyZSB0byBpbnNwZWN0IHRoZSBvdXRwdXQgYmVsb3cuICBEbyBub3QgaWdub3JlIGNoYW5nZXMhXG4gKi9cbid1c2Ugc3RyaWN0J1xuZXhwb3J0c1tgdGVzdC9mb3JtYXQtZGlmZi5qcyBUQVAgYWRkZWQgZmlsZSA+IHNob3VsZCBvdXRwdXQgZXhwZWN0ZWQgYWRkZWQgZmlsZSBkaWZmIHJlc3VsdCAxYF0gPSBgXG5kaWZmIC0tZ2l0IGEvZm9vLmpzIGIvZm9vLmpzXG5uZXcgZmlsZSBtb2RlIDEwMDc1NVxuaW5kZXggdjEuMC4wLi52Mi4wLjAgXG4tLS0gYS9mb28uanNcbisrKyBiL2Zvby5qc1xuQEAgLTAsMCArMSwyIEBAXG4rXCJ1c2Ugc3RyaWN0XCJcbittb2R1bGUuZXhwb3J0cyA9IFwiZm9vXCJcbmBcblxuZXhwb3J0c1tgdGVzdC9mb3JtYXQtZGlmZi5qcyBUQVAgYmluYXJ5IGZpbGUgPiBzaG91bGQgb3V0cHV0IGV4cGVjdGVkIGJpbiBmaWxlIGRpZmYgcmVzdWx0IDFgXSA9IGBcbmRpZmYgLS1naXQgYS9mb28uanBnIGIvZm9vLmpwZ1xuaW5kZXggdjEuMC4wLi52Mi4wLjAgMTAwNjQ0XG4tLS0gYS9mb28uanBnXG4rKysgYi9mb28uanBnXG5gXG5cbmV4cG9ydHNbYHRlc3QvZm9ybWF0LWRpZmYuanMgVEFQIGNoYW5nZWQgZmlsZSBtb2RlID4gc2hvdWxkIG91dHB1dCBleHBlY3RlZCBjaGFuZ2VkIGZpbGUgbW9kZSBkaWZmIHJlc3VsdCAxYF0gPSBgXG5kaWZmIC0tZ2l0IGEvZm9vLmpzIGIvZm9vLmpzXG5vbGQgbW9kZSAxMDA2NDRcbm5ldyBtb2RlIDEwMDc1NVxuaW5kZXggdjEuMC4wLi52Mi4wLjAgXG4tLS0gYS9mb28uanNcbisrKyBiL2Zvby5qc1xuYFxuXG5leHBvcnRzW2B0ZXN0L2Zvcm1hdC1kaWZmLmpzIFRBUCBjb2xvcmVkIG91dHB1dCA+IHNob3VsZCBvdXRwdXQgZXhwZWN0ZWQgY29sb3JlZCBkaWZmIHJlc3VsdCAxYF0gPSBgXG5cdTAwMWJbMzNtZGlmZiAtLWdpdCBhL2Zvby5qcyBiL2Zvby5qc1x1MDAxYlszOW1cblx1MDAxYlszM21pbmRleCB2MS4wLjAuLnYyLjAuMCAxMDA2NDRcdTAwMWJbMzltXG5cdTAwMWJbMzNtLS0tIGEvZm9vLmpzXHUwMDFiWzM5bVxuXHUwMDFiWzMzbSsrKyBiL2Zvby5qc1x1MDAxYlszOW1cblx1MDAxYlszNW1AQCAtMSwyICsxLDIgQEBcdTAwMWJbMzltXG4gXCJ1c2Ugc3RyaWN0XCJcblx1MDAxYlszMW0tbW9kdWxlLmV4cG9ydHMgPSBcImZvb1wiXHUwMDFiWzM5bVxuXHUwMDFiWzMybSttb2R1bGUuZXhwb3J0cyA9IFwiZm9vYmFyXCJcdTAwMWJbMzltXG5gXG5cbmV4cG9ydHNbYHRlc3QvZm9ybWF0LWRpZmYuanMgVEFQIGRpZmYgb3B0aW9ucyA+IHNob3VsZCBvdXRwdXQgZXhwZWN0ZWQgZGlmZiByZXN1bHQgMWBdID0gYFxuZGlmZiAtLWdpdCBiZWZvcmUvZm9vLmpzIGFmdGVyL2Zvby5qc1xuaW5kZXggdjEuMC4wLi52Mi4wLjAgMTAwNjQ0XG4tLS0gYmVmb3JlL2Zvby5qc1xuKysrIGFmdGVyL2Zvby5qc1xuQEAgLTQsNCArNCw2IEBAXG4gY29uc3QgYyA9IFwiY1wiXG4rY29uc3QgZCA9IFwiZFwiXG4gbW9kdWxlLmV4cG9ydHMgPSAoKSA9PiBhK1xuIGIrXG4tY1xuK2MrXG4rZFxuYFxuXG5leHBvcnRzW2B0ZXN0L2Zvcm1hdC1kaWZmLmpzIFRBUCBkaWZmVW5pZmllZD0wID4gc2hvdWxkIG91dHB1dCBubyBjb250ZXh0IGxpbmVzIGluIG91dHB1dCAxYF0gPSBgXG5kaWZmIC0tZ2l0IGEvZm9vLmpzIGIvZm9vLmpzXG5pbmRleCB2MS4wLjAuLnYyLjAuMCAxMDA2NDRcbi0tLSBhL2Zvby5qc1xuKysrIGIvZm9vLmpzXG5AQCAtMywyICszLDMgQEBcbi1jb25zdCBiID0gXCJiXCJcbi1jb25zdCBjID0gXCJjXCJcbisgIGNvbnN0IGIgPSBcImJcIlxuKyAgY29uc3QgYyA9IFwiY1wiXG4rICBjb25zdCBkID0gXCJkXCJcbkBAIC03LDEgKzgsMiBAQFxuLWNcbitjK1xuK2RcbmBcblxuZXhwb3J0c1tgdGVzdC9mb3JtYXQtZGlmZi5qcyBUQVAgZm9ybWF0IG11bHRpcGxlIGZpbGVzIHBhdGNoID4gc2hvdWxkIG91dHB1dCBleHBlY3RlZCByZXN1bHQgZm9yIG11bHRpcGxlIGZpbGVzIDFgXSA9IGBcbmRpZmYgLS1naXQgYS9mb28uanMgYi9mb28uanNcbmluZGV4IHYxLjAuMC4udjEuMS4xIDEwMDY0NFxuLS0tIGEvZm9vLmpzXG4rKysgYi9mb28uanNcbkBAIC0xLDIgKzEsMiBAQFxuIFwidXNlIHN0cmljdFwiXG4tbW9kdWxlLmV4cG9ydHMgPSBcImZvb1wiXG4rbW9kdWxlLmV4cG9ydHMgPSBcImZvb2JhclwiXG5kaWZmIC0tZ2l0IGEvbGliL3V0aWxzLmpzIGIvbGliL3V0aWxzLmpzXG5pbmRleCB2MS4wLjAuLnYxLjEuMSAxMDA2NDRcbi0tLSBhL2xpYi91dGlscy5qc1xuKysrIGIvbGliL3V0aWxzLmpzXG5AQCAtMSwzICsxLDQgQEBcbiBcInVzZSBzdHJpY3RcIlxuIGNvbnN0IGJhciA9IHJlcXVpcmUoXCIuL2Jhci5qc1wiKVxuLW1vZHVsZS5leHBvcnRzID0gKCkgPT4gYmFyXG4rbW9kdWxlLmV4cG9ydHMgPVxuKyAgKCkgPT4gYmFyICsgXCJ1dGlsXCJcbmBcblxuZXhwb3J0c1tgdGVzdC9mb3JtYXQtZGlmZi5qcyBUQVAgZm9ybWF0IHJlbW92ZWQgZmlsZSA+IHNob3VsZCBvdXRwdXQgZXhwZWN0ZWQgcmVtb3ZlZCBmaWxlIGRpZmYgcmVzdWx0IDFgXSA9IGBcbmRpZmYgLS1naXQgYS9mb28uanMgYi9mb28uanNcbmRlbGV0ZWQgZmlsZSBtb2RlIDEwMDY0NFxuaW5kZXggdjEuMC4wLi52Mi4wLjAgXG4tLS0gYS9mb28uanNcbisrKyBiL2Zvby5qc1xuQEAgLTEsMiArMCwwIEBAXG4tXCJ1c2Ugc3RyaWN0XCJcbi1tb2R1bGUuZXhwb3J0cyA9IFwiZm9vXCJcbi8gTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZVxuYFxuXG5leHBvcnRzW2B0ZXN0L2Zvcm1hdC1kaWZmLmpzIFRBUCBmb3JtYXQgc2ltcGxlIGRpZmYgPiBzaG91bGQgb3V0cHV0IGV4cGVjdGVkIGRpZmYgcmVzdWx0IDFgXSA9IGBcbmRpZmYgLS1naXQgYS9mb28uanMgYi9mb28uanNcbmluZGV4IHYxLjAuMC4udjIuMC4wIDEwMDY0NFxuLS0tIGEvZm9vLmpzXG4rKysgYi9mb28uanNcbkBAIC0xLDIgKzEsMiBAQFxuIFwidXNlIHN0cmljdFwiXG4tbW9kdWxlLmV4cG9ydHMgPSBcImZvb1wiXG4rbW9kdWxlLmV4cG9ydHMgPSBcImZvb2JhclwiXG5gXG5cbmV4cG9ydHNbYHRlc3QvZm9ybWF0LWRpZmYuanMgVEFQIG5vUHJlZml4ID4gc2hvdWxkIG91dHB1dCByZXN1bHQgd2l0aCBubyBwcmVmaXhlcyAxYF0gPSBgXG5kaWZmIC0tZ2l0IGZvby5qcyBmb28uanNcbmluZGV4IHYxLjAuMC4udjIuMC4wIDEwMDY0NFxuSW5kZXg6IGZvby5qc1xuLS0tIGZvby5qc1xuKysrIGZvby5qc1xuQEAgLTEsMiArMSwyIEBAXG4gXCJ1c2Ugc3RyaWN0XCJcbi1tb2R1bGUuZXhwb3J0cyA9IFwiZm9vXCJcbittb2R1bGUuZXhwb3J0cyA9IFwiZm9vYmFyXCJcbmBcblxuZXhwb3J0c1tgdGVzdC9mb3JtYXQtZGlmZi5qcyBUQVAgbm90aGluZyB0byBkaWZmID4gc2hvdWxkIG91dHB1dCBlbXB0eSByZXN1bHQgMWBdID0gYFxuXG5gXG5cbmV4cG9ydHNbYHRlc3QvZm9ybWF0LWRpZmYuanMgVEFQIHJlc3BlY3QgLS10YWctdmVyc2lvbi1wcmVmaXggb3B0aW9uID4gc2hvdWxkIG91dHB1dCBleHBlY3RlZCBkaWZmIHJlc3VsdCAxYF0gPSBgXG5kaWZmIC0tZ2l0IGEvZm9vLmpzIGIvZm9vLmpzXG5pbmRleCBiMS4wLjAuLmIyLjAuMCAxMDA2NDRcbi0tLSBhL2Zvby5qc1xuKysrIGIvZm9vLmpzXG5AQCAtMSwyICsxLDIgQEBcbiBcInVzZSBzdHJpY3RcIlxuLW1vZHVsZS5leHBvcnRzID0gXCJmb29cIlxuK21vZHVsZS5leHBvcnRzID0gXCJmb29iYXJcIlxuYFxuXG5leHBvcnRzW2B0ZXN0L2Zvcm1hdC1kaWZmLmpzIFRBUCB1c2luZyAtLW5hbWUtb25seSBvcHRpb24gPiBzaG91bGQgb3V0cHV0IGV4cGVjdGVkIGRpZmYgcmVzdWx0IDFgXSA9IGBcbmZvby5qc1xubGliL3V0aWxzLmpzXG5gXG4iXX0=