/* IMPORTANT
 * This snapshot file is auto-generated, but designed for humans.
 * It should be checked into source control and tracked carefully.
 * Re-generate by setting TAP_SNAPSHOT=1 and running tests.
 * Make sure to inspect the output below.  Do not ignore changes!
 */'use strict';function cov_23sqmo6k3f(){var path="/Users/ruyadorno/Documents/workspace/cli/main/packages/libnpmdiff/tap-snapshots/test/index.js.test.cjs";var hash="21524a917a9ba6fad59c96298322f1ff3219c62b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/ruyadorno/Documents/workspace/cli/main/packages/libnpmdiff/tap-snapshots/test/index.js.test.cjs",statementMap:{"0":{start:{line:8,column:0},end:{line:27,column:1}},"1":{start:{line:29,column:0},end:{line:49,column:1}},"2":{start:{line:51,column:0},end:{line:71,column:1}},"3":{start:{line:73,column:0},end:{line:93,column:1}},"4":{start:{line:95,column:0},end:{line:115,column:1}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"21524a917a9ba6fad59c96298322f1ff3219c62b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_23sqmo6k3f=function(){return actualCoverage;};}return actualCoverage;}cov_23sqmo6k3f();cov_23sqmo6k3f().s[0]++;exports[`test/index.js TAP compare two diff specs > should output expected diff 1`]=`
diff --git a/index.js b/index.js
index v1.0.0..v2.0.0 100644
--- a/index.js
+++ b/index.js
@@ -1,2 +1,2 @@
 module.exports =
-  "a1"
+  "a2"
diff --git a/package.json b/package.json
index v1.0.0..v2.0.0 100644
--- a/package.json
+++ b/package.json
@@ -1,4 +1,4 @@
 {
   "name": "a",
-  "version": "1.0.0"
+  "version": "2.0.0"
 }
`;cov_23sqmo6k3f().s[1]++;exports[`test/index.js TAP folder in node_modules nested, absolute path > should output expected diff 1`]=`
diff --git a/package.json b/package.json
index v2.0.0..v2.0.1 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "b",
-  "version": "2.0.0",
+  "version": "2.0.1",
   "scripts": {
     "prepare": "node prepare.js"
   }
diff --git a/prepare.js b/prepare.js
index v2.0.0..v2.0.1 100644
--- a/prepare.js
+++ b/prepare.js
@@ -1,1 +0,0 @@
-throw new Error("ERR")
/ No newline at end of file
`;cov_23sqmo6k3f().s[2]++;exports[`test/index.js TAP folder in node_modules nested, relative path > should output expected diff 1`]=`
diff --git a/package.json b/package.json
index v2.0.0..v2.0.1 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "b",
-  "version": "2.0.0",
+  "version": "2.0.1",
   "scripts": {
     "prepare": "node prepare.js"
   }
diff --git a/prepare.js b/prepare.js
index v2.0.0..v2.0.1 100644
--- a/prepare.js
+++ b/prepare.js
@@ -1,1 +0,0 @@
-throw new Error("ERR")
/ No newline at end of file
`;cov_23sqmo6k3f().s[3]++;exports[`test/index.js TAP folder in node_modules top-level, absolute path > should output expected diff 1`]=`
diff --git a/package.json b/package.json
index v1.0.0..v1.0.1 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "a",
-  "version": "1.0.0",
+  "version": "1.0.1",
   "scripts": {
     "prepare": "node prepare.js"
   }
diff --git a/prepare.js b/prepare.js
index v1.0.0..v1.0.1 100644
--- a/prepare.js
+++ b/prepare.js
@@ -1,1 +0,0 @@
-throw new Error("ERR")
/ No newline at end of file
`;cov_23sqmo6k3f().s[4]++;exports[`test/index.js TAP folder in node_modules top-level, relative path > should output expected diff 1`]=`
diff --git a/package.json b/package.json
index v1.0.0..v1.0.1 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "a",
-  "version": "1.0.0",
+  "version": "1.0.1",
   "scripts": {
     "prepare": "node prepare.js"
   }
diff --git a/prepare.js b/prepare.js
index v1.0.0..v1.0.1 100644
--- a/prepare.js
+++ b/prepare.js
@@ -1,1 +0,0 @@
-throw new Error("ERR")
/ No newline at end of file
`;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzLnRlc3QuY2pzIl0sIm5hbWVzIjpbImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLGEscytCQVNZO21IQVJaQSxPQUFPLENBQUUsMEVBQUYsQ0FBUCxDQUF1RjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQW5CQSxDLHdCQXFCQUEsT0FBTyxDQUFFLGdHQUFGLENBQVAsQ0FBNkc7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQXBCQSxDLHdCQXNCQUEsT0FBTyxDQUFFLGdHQUFGLENBQVAsQ0FBNkc7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQXBCQSxDLHdCQXNCQUEsT0FBTyxDQUFFLG1HQUFGLENBQVAsQ0FBZ0g7QUFDaEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQXBCQSxDLHdCQXNCQUEsT0FBTyxDQUFFLG1HQUFGLENBQVAsQ0FBZ0g7QUFDaEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQXBCQSIsInNvdXJjZXNDb250ZW50IjpbIi8qIElNUE9SVEFOVFxuICogVGhpcyBzbmFwc2hvdCBmaWxlIGlzIGF1dG8tZ2VuZXJhdGVkLCBidXQgZGVzaWduZWQgZm9yIGh1bWFucy5cbiAqIEl0IHNob3VsZCBiZSBjaGVja2VkIGludG8gc291cmNlIGNvbnRyb2wgYW5kIHRyYWNrZWQgY2FyZWZ1bGx5LlxuICogUmUtZ2VuZXJhdGUgYnkgc2V0dGluZyBUQVBfU05BUFNIT1Q9MSBhbmQgcnVubmluZyB0ZXN0cy5cbiAqIE1ha2Ugc3VyZSB0byBpbnNwZWN0IHRoZSBvdXRwdXQgYmVsb3cuICBEbyBub3QgaWdub3JlIGNoYW5nZXMhXG4gKi9cbid1c2Ugc3RyaWN0J1xuZXhwb3J0c1tgdGVzdC9pbmRleC5qcyBUQVAgY29tcGFyZSB0d28gZGlmZiBzcGVjcyA+IHNob3VsZCBvdXRwdXQgZXhwZWN0ZWQgZGlmZiAxYF0gPSBgXG5kaWZmIC0tZ2l0IGEvaW5kZXguanMgYi9pbmRleC5qc1xuaW5kZXggdjEuMC4wLi52Mi4wLjAgMTAwNjQ0XG4tLS0gYS9pbmRleC5qc1xuKysrIGIvaW5kZXguanNcbkBAIC0xLDIgKzEsMiBAQFxuIG1vZHVsZS5leHBvcnRzID1cbi0gIFwiYTFcIlxuKyAgXCJhMlwiXG5kaWZmIC0tZ2l0IGEvcGFja2FnZS5qc29uIGIvcGFja2FnZS5qc29uXG5pbmRleCB2MS4wLjAuLnYyLjAuMCAxMDA2NDRcbi0tLSBhL3BhY2thZ2UuanNvblxuKysrIGIvcGFja2FnZS5qc29uXG5AQCAtMSw0ICsxLDQgQEBcbiB7XG4gICBcIm5hbWVcIjogXCJhXCIsXG4tICBcInZlcnNpb25cIjogXCIxLjAuMFwiXG4rICBcInZlcnNpb25cIjogXCIyLjAuMFwiXG4gfVxuYFxuXG5leHBvcnRzW2B0ZXN0L2luZGV4LmpzIFRBUCBmb2xkZXIgaW4gbm9kZV9tb2R1bGVzIG5lc3RlZCwgYWJzb2x1dGUgcGF0aCA+IHNob3VsZCBvdXRwdXQgZXhwZWN0ZWQgZGlmZiAxYF0gPSBgXG5kaWZmIC0tZ2l0IGEvcGFja2FnZS5qc29uIGIvcGFja2FnZS5qc29uXG5pbmRleCB2Mi4wLjAuLnYyLjAuMSAxMDA2NDRcbi0tLSBhL3BhY2thZ2UuanNvblxuKysrIGIvcGFja2FnZS5qc29uXG5AQCAtMSw2ICsxLDYgQEBcbiB7XG4gICBcIm5hbWVcIjogXCJiXCIsXG4tICBcInZlcnNpb25cIjogXCIyLjAuMFwiLFxuKyAgXCJ2ZXJzaW9uXCI6IFwiMi4wLjFcIixcbiAgIFwic2NyaXB0c1wiOiB7XG4gICAgIFwicHJlcGFyZVwiOiBcIm5vZGUgcHJlcGFyZS5qc1wiXG4gICB9XG5kaWZmIC0tZ2l0IGEvcHJlcGFyZS5qcyBiL3ByZXBhcmUuanNcbmluZGV4IHYyLjAuMC4udjIuMC4xIDEwMDY0NFxuLS0tIGEvcHJlcGFyZS5qc1xuKysrIGIvcHJlcGFyZS5qc1xuQEAgLTEsMSArMCwwIEBAXG4tdGhyb3cgbmV3IEVycm9yKFwiRVJSXCIpXG4vIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGVcbmBcblxuZXhwb3J0c1tgdGVzdC9pbmRleC5qcyBUQVAgZm9sZGVyIGluIG5vZGVfbW9kdWxlcyBuZXN0ZWQsIHJlbGF0aXZlIHBhdGggPiBzaG91bGQgb3V0cHV0IGV4cGVjdGVkIGRpZmYgMWBdID0gYFxuZGlmZiAtLWdpdCBhL3BhY2thZ2UuanNvbiBiL3BhY2thZ2UuanNvblxuaW5kZXggdjIuMC4wLi52Mi4wLjEgMTAwNjQ0XG4tLS0gYS9wYWNrYWdlLmpzb25cbisrKyBiL3BhY2thZ2UuanNvblxuQEAgLTEsNiArMSw2IEBAXG4ge1xuICAgXCJuYW1lXCI6IFwiYlwiLFxuLSAgXCJ2ZXJzaW9uXCI6IFwiMi4wLjBcIixcbisgIFwidmVyc2lvblwiOiBcIjIuMC4xXCIsXG4gICBcInNjcmlwdHNcIjoge1xuICAgICBcInByZXBhcmVcIjogXCJub2RlIHByZXBhcmUuanNcIlxuICAgfVxuZGlmZiAtLWdpdCBhL3ByZXBhcmUuanMgYi9wcmVwYXJlLmpzXG5pbmRleCB2Mi4wLjAuLnYyLjAuMSAxMDA2NDRcbi0tLSBhL3ByZXBhcmUuanNcbisrKyBiL3ByZXBhcmUuanNcbkBAIC0xLDEgKzAsMCBAQFxuLXRocm93IG5ldyBFcnJvcihcIkVSUlwiKVxuLyBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlXG5gXG5cbmV4cG9ydHNbYHRlc3QvaW5kZXguanMgVEFQIGZvbGRlciBpbiBub2RlX21vZHVsZXMgdG9wLWxldmVsLCBhYnNvbHV0ZSBwYXRoID4gc2hvdWxkIG91dHB1dCBleHBlY3RlZCBkaWZmIDFgXSA9IGBcbmRpZmYgLS1naXQgYS9wYWNrYWdlLmpzb24gYi9wYWNrYWdlLmpzb25cbmluZGV4IHYxLjAuMC4udjEuMC4xIDEwMDY0NFxuLS0tIGEvcGFja2FnZS5qc29uXG4rKysgYi9wYWNrYWdlLmpzb25cbkBAIC0xLDYgKzEsNiBAQFxuIHtcbiAgIFwibmFtZVwiOiBcImFcIixcbi0gIFwidmVyc2lvblwiOiBcIjEuMC4wXCIsXG4rICBcInZlcnNpb25cIjogXCIxLjAuMVwiLFxuICAgXCJzY3JpcHRzXCI6IHtcbiAgICAgXCJwcmVwYXJlXCI6IFwibm9kZSBwcmVwYXJlLmpzXCJcbiAgIH1cbmRpZmYgLS1naXQgYS9wcmVwYXJlLmpzIGIvcHJlcGFyZS5qc1xuaW5kZXggdjEuMC4wLi52MS4wLjEgMTAwNjQ0XG4tLS0gYS9wcmVwYXJlLmpzXG4rKysgYi9wcmVwYXJlLmpzXG5AQCAtMSwxICswLDAgQEBcbi10aHJvdyBuZXcgRXJyb3IoXCJFUlJcIilcbi8gTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZVxuYFxuXG5leHBvcnRzW2B0ZXN0L2luZGV4LmpzIFRBUCBmb2xkZXIgaW4gbm9kZV9tb2R1bGVzIHRvcC1sZXZlbCwgcmVsYXRpdmUgcGF0aCA+IHNob3VsZCBvdXRwdXQgZXhwZWN0ZWQgZGlmZiAxYF0gPSBgXG5kaWZmIC0tZ2l0IGEvcGFja2FnZS5qc29uIGIvcGFja2FnZS5qc29uXG5pbmRleCB2MS4wLjAuLnYxLjAuMSAxMDA2NDRcbi0tLSBhL3BhY2thZ2UuanNvblxuKysrIGIvcGFja2FnZS5qc29uXG5AQCAtMSw2ICsxLDYgQEBcbiB7XG4gICBcIm5hbWVcIjogXCJhXCIsXG4tICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxuKyAgXCJ2ZXJzaW9uXCI6IFwiMS4wLjFcIixcbiAgIFwic2NyaXB0c1wiOiB7XG4gICAgIFwicHJlcGFyZVwiOiBcIm5vZGUgcHJlcGFyZS5qc1wiXG4gICB9XG5kaWZmIC0tZ2l0IGEvcHJlcGFyZS5qcyBiL3ByZXBhcmUuanNcbmluZGV4IHYxLjAuMC4udjEuMC4xIDEwMDY0NFxuLS0tIGEvcHJlcGFyZS5qc1xuKysrIGIvcHJlcGFyZS5qc1xuQEAgLTEsMSArMCwwIEBAXG4tdGhyb3cgbmV3IEVycm9yKFwiRVJSXCIpXG4vIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGVcbmBcbiJdfQ==