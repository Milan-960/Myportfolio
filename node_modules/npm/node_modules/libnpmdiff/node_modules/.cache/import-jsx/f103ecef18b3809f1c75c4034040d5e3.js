const React = require('react');

const {
  Box,
  Color
} = require('ink');

const util = require('util');

const counts = require('./counts.js');

const chalk = require('chalk');

const yaml = require('tap-yaml');

const ms = require('ms');

const importJSX = require('import-jsx');

const AssertName = importJSX('./assert-name.js');
const StatusMark = importJSX('./status-mark.js');

const showYaml = test => test.results && !test.results.ok && !test.lists.fail.length && (test.options.exitCode || test.options.signal);

const lists = test => /*#__PURE__*/React.createElement(Box, {
  flexDirection: "column",
  marginBottom: showYaml(test) || test.lists.fail.length || test.lists.todo.length || test.lists.skip.length ? 1 : 0
}, test.lists.fail.length ? /*#__PURE__*/React.createElement(Box, {
  flexDirection: "column"
}, test.lists.fail.map((res, i) => /*#__PURE__*/React.createElement(AssertName, Object.assign({}, res, {
  key: '' + i
})))) : '', test.lists.todo.length ? /*#__PURE__*/React.createElement(Box, {
  flexDirection: "column"
}, test.lists.todo.map((res, i) => /*#__PURE__*/React.createElement(AssertName, Object.assign({}, res, {
  key: '' + i
})))) : '', test.lists.skip.length ? /*#__PURE__*/React.createElement(Box, {
  flexDirection: "column"
}, test.lists.skip.map((res, i) => /*#__PURE__*/React.createElement(AssertName, Object.assign({}, res, {
  key: '' + i
})))) : '', // cases where no tests fail, but the test fails
// eg, exiting with non-zero code, being killed, etc.
showYaml(test) ? /*#__PURE__*/React.createElement(Box, null, '  ' + yaml.stringify({
  command: test.options.command,
  args: test.options.args,
  exitCode: test.options.exitCode,
  signal: test.options.signal
}).replace(/\n/g, '\n  ').trimRight()) : '', printBail(test.results));

const skipOrTodoReason = test => test.options.skip && test.options.skip !== true ? ` > ${chalk.cyan(test.options.skip)}` : test.options.todo && test.options.todo !== true ? ` > ${chalk.magenta(test.options.todo)}` : '';

const printBail = results => !results || !results.bailout ? '' : /*#__PURE__*/React.createElement(Box, {
  marginTop: 1
}, chalk.bold.red('BAILOUT ') + results.bailout);

const printLists = test => test.results && (test.results.bailout || !test.results.ok || test.counts.pass !== test.counts.total);

const time = (time, start, end) => !start ? /*#__PURE__*/React.createElement(Color, {
  dim: true
}, ' ...') : /*#__PURE__*/React.createElement(Color, {
  hex: "#aaa",
  bold: true
}, ms(time || (end || Date.now()) - start));

module.exports = ({
  test
}) => /*#__PURE__*/React.createElement(Box, {
  flexDirection: "column"
}, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(StatusMark, {
  test: test
}), ' ' + test.name + skipOrTodoReason(test), counts(test.counts), time(test.time, test.startTime, test.endTime)), printLists(test) ? lists(test) : '');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,