import { Container } from "./Container";
import { ICoordinates } from "./Interfaces/ICoordinates";
import { IMouseData } from "./Interfaces/IMouseData";
import { IRgb } from "./Interfaces/Colors";
import { Particle } from "./Particle";
import { QuadTree } from "../Utils";
import { RecursivePartial } from "../Types";
import { IParticles } from "../Options/Interfaces/Particles/IParticles";
import { IDelta } from "./Interfaces/IDelta";
import { IParticle } from "./Interfaces/IParticle";
export declare class Particles {
    private readonly container;
    readonly count: number;
    quadTree: QuadTree;
    linksColors: Map<string, string | IRgb | undefined>;
    limit: number;
    array: Particle[];
    pushing?: boolean;
    linksColor?: IRgb | string;
    grabLineColor?: IRgb | string;
    private interactionManager;
    private nextId;
    private linksFreq;
    private trianglesFreq;
    constructor(container: Container);
    init(): void;
    redraw(): void;
    removeAt(index: number, quantity?: number, override?: boolean): void;
    remove(particle: Particle, override?: boolean): void;
    update(delta: IDelta): void;
    draw(delta: IDelta): void;
    clear(): void;
    push(nb: number, mouse?: IMouseData, overrideOptions?: RecursivePartial<IParticles>): void;
    addParticle(position?: ICoordinates, overrideOptions?: RecursivePartial<IParticles>): Particle | undefined;
    addSplitParticle(parent: Particle): Particle | undefined;
    removeQuantity(quantity: number): void;
    getLinkFrequency(p1: IParticle, p2: IParticle): number;
    getTriangleFrequency(p1: IParticle, p2: IParticle, p3: IParticle): number;
    setDensity(): void;
    private applyDensity;
    private initDensityFactor;
    private pushParticle;
}
